
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fbce 	bl	200007a4 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
 #define STK_LOAD ((volatile unsigned int*)(0xE000E014))
 #define STK_VAL  ((volatile unsigned int*)(0xE000E018))
 
 #define SIMULATOR

void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	#ifdef SIMULATOR
		return;
20000014:	46c0      	nop			; (mov r8, r8)
		*STK_CTRL = 0;
		*STK_LOAD = ((168/4-1));
		*STK_VAL;
		*STK_CTRL = 5;
		while((*STK_CTRL & 10000) == 0){}
}
20000016:	46bd      	mov	sp, r7
20000018:	bd80      	pop	{r7, pc}

2000001a <delay_500ns>:
void delay_500ns(void){
2000001a:	b580      	push	{r7, lr}
2000001c:	af00      	add	r7, sp, #0
	delay_250ns();
2000001e:	f7ff fff7 	bl	20000010 <delay_250ns>
	delay_250ns();
20000022:	f7ff fff5 	bl	20000010 <delay_250ns>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}

2000002c <delay_mikro>:

void delay_mikro(unsigned int us){
2000002c:	b580      	push	{r7, lr}
2000002e:	b082      	sub	sp, #8
20000030:	af00      	add	r7, sp, #0
20000032:	6078      	str	r0, [r7, #4]
	while(us--){
20000034:	e007      	b.n	20000046 <delay_mikro+0x1a>
		delay_250ns();
20000036:	f7ff ffeb 	bl	20000010 <delay_250ns>
		delay_250ns();
2000003a:	f7ff ffe9 	bl	20000010 <delay_250ns>
		delay_250ns();
2000003e:	f7ff ffe7 	bl	20000010 <delay_250ns>
		delay_250ns();
20000042:	f7ff ffe5 	bl	20000010 <delay_250ns>
	while(us--){
20000046:	687b      	ldr	r3, [r7, #4]
20000048:	1e5a      	subs	r2, r3, #1
2000004a:	607a      	str	r2, [r7, #4]
2000004c:	2b00      	cmp	r3, #0
2000004e:	d1f2      	bne.n	20000036 <delay_mikro+0xa>
	}

}
20000050:	46c0      	nop			; (mov r8, r8)
20000052:	46c0      	nop			; (mov r8, r8)
20000054:	46bd      	mov	sp, r7
20000056:	b002      	add	sp, #8
20000058:	bd80      	pop	{r7, pc}

2000005a <delay_milli>:

void delay_milli(unsigned int ms){
2000005a:	b580      	push	{r7, lr}
2000005c:	b082      	sub	sp, #8
2000005e:	af00      	add	r7, sp, #0
20000060:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
20000062:	687b      	ldr	r3, [r7, #4]
20000064:	22fa      	movs	r2, #250	; 0xfa
20000066:	0091      	lsls	r1, r2, #2
20000068:	0018      	movs	r0, r3
2000006a:	f000 fbb5 	bl	200007d8 <__udivsi3>
2000006e:	0003      	movs	r3, r0
20000070:	607b      	str	r3, [r7, #4]
		ms++;
20000072:	687b      	ldr	r3, [r7, #4]
20000074:	3301      	adds	r3, #1
20000076:	607b      	str	r3, [r7, #4]
	#endif
	while(ms--){
20000078:	e004      	b.n	20000084 <delay_milli+0x2a>
		delay_mikro(1000);
2000007a:	23fa      	movs	r3, #250	; 0xfa
2000007c:	009b      	lsls	r3, r3, #2
2000007e:	0018      	movs	r0, r3
20000080:	f7ff ffd4 	bl	2000002c <delay_mikro>
	while(ms--){
20000084:	687b      	ldr	r3, [r7, #4]
20000086:	1e5a      	subs	r2, r3, #1
20000088:	607a      	str	r2, [r7, #4]
2000008a:	2b00      	cmp	r3, #0
2000008c:	d1f5      	bne.n	2000007a <delay_milli+0x20>
	}
}
2000008e:	46c0      	nop			; (mov r8, r8)
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46bd      	mov	sp, r7
20000094:	b002      	add	sp, #8
20000096:	bd80      	pop	{r7, pc}

20000098 <graphic_ctrl_bit_set>:
 #define LCD_DISP_START 0xC0
 #define LCD_BUSY       0x80
 
 typedef unsigned char uint8_t;
 
 void graphic_ctrl_bit_set(uint8_t x){
20000098:	b580      	push	{r7, lr}
2000009a:	b084      	sub	sp, #16
2000009c:	af00      	add	r7, sp, #0
2000009e:	0002      	movs	r2, r0
200000a0:	1dfb      	adds	r3, r7, #7
200000a2:	701a      	strb	r2, [r3, #0]
	 uint8_t c;
	 c = *GPIO_E_ODR_LOW;
200000a4:	4a0f      	ldr	r2, [pc, #60]	; (200000e4 <graphic_ctrl_bit_set+0x4c>)
200000a6:	200f      	movs	r0, #15
200000a8:	183b      	adds	r3, r7, r0
200000aa:	7812      	ldrb	r2, [r2, #0]
200000ac:	701a      	strb	r2, [r3, #0]
	 c &= ~B_SELECT;
200000ae:	183b      	adds	r3, r7, r0
200000b0:	183a      	adds	r2, r7, r0
200000b2:	7812      	ldrb	r2, [r2, #0]
200000b4:	2104      	movs	r1, #4
200000b6:	438a      	bics	r2, r1
200000b8:	701a      	strb	r2, [r3, #0]
	 c |= (~B_SELECT & x);
200000ba:	1dfb      	adds	r3, r7, #7
200000bc:	781b      	ldrb	r3, [r3, #0]
200000be:	b25b      	sxtb	r3, r3
200000c0:	2204      	movs	r2, #4
200000c2:	4393      	bics	r3, r2
200000c4:	b25a      	sxtb	r2, r3
200000c6:	183b      	adds	r3, r7, r0
200000c8:	781b      	ldrb	r3, [r3, #0]
200000ca:	b25b      	sxtb	r3, r3
200000cc:	4313      	orrs	r3, r2
200000ce:	b25a      	sxtb	r2, r3
200000d0:	183b      	adds	r3, r7, r0
200000d2:	701a      	strb	r2, [r3, #0]
	 *GPIO_E_ODR_LOW = c;
200000d4:	4a03      	ldr	r2, [pc, #12]	; (200000e4 <graphic_ctrl_bit_set+0x4c>)
200000d6:	183b      	adds	r3, r7, r0
200000d8:	781b      	ldrb	r3, [r3, #0]
200000da:	7013      	strb	r3, [r2, #0]
 }
200000dc:	46c0      	nop			; (mov r8, r8)
200000de:	46bd      	mov	sp, r7
200000e0:	b004      	add	sp, #16
200000e2:	bd80      	pop	{r7, pc}
200000e4:	40021014 	andmi	r1, r2, r4, lsl r0

200000e8 <graphic_ctrl_bit_clear>:
 void graphic_ctrl_bit_clear(uint8_t x){
200000e8:	b580      	push	{r7, lr}
200000ea:	b084      	sub	sp, #16
200000ec:	af00      	add	r7, sp, #0
200000ee:	0002      	movs	r2, r0
200000f0:	1dfb      	adds	r3, r7, #7
200000f2:	701a      	strb	r2, [r3, #0]
	 uint8_t c;
	 c = *GPIO_E_ODR_LOW;
200000f4:	4a0f      	ldr	r2, [pc, #60]	; (20000134 <graphic_ctrl_bit_clear+0x4c>)
200000f6:	200f      	movs	r0, #15
200000f8:	183b      	adds	r3, r7, r0
200000fa:	7812      	ldrb	r2, [r2, #0]
200000fc:	701a      	strb	r2, [r3, #0]
	 c &= ~B_SELECT;
200000fe:	183b      	adds	r3, r7, r0
20000100:	183a      	adds	r2, r7, r0
20000102:	7812      	ldrb	r2, [r2, #0]
20000104:	2104      	movs	r1, #4
20000106:	438a      	bics	r2, r1
20000108:	701a      	strb	r2, [r3, #0]
	 c &= ~x;
2000010a:	1dfb      	adds	r3, r7, #7
2000010c:	781b      	ldrb	r3, [r3, #0]
2000010e:	b25b      	sxtb	r3, r3
20000110:	43db      	mvns	r3, r3
20000112:	b25b      	sxtb	r3, r3
20000114:	183a      	adds	r2, r7, r0
20000116:	7812      	ldrb	r2, [r2, #0]
20000118:	b252      	sxtb	r2, r2
2000011a:	4013      	ands	r3, r2
2000011c:	b25a      	sxtb	r2, r3
2000011e:	183b      	adds	r3, r7, r0
20000120:	701a      	strb	r2, [r3, #0]
	 *GPIO_E_ODR_LOW = c;
20000122:	4a04      	ldr	r2, [pc, #16]	; (20000134 <graphic_ctrl_bit_clear+0x4c>)
20000124:	183b      	adds	r3, r7, r0
20000126:	781b      	ldrb	r3, [r3, #0]
20000128:	7013      	strb	r3, [r2, #0]
 }
2000012a:	46c0      	nop			; (mov r8, r8)
2000012c:	46bd      	mov	sp, r7
2000012e:	b004      	add	sp, #16
20000130:	bd80      	pop	{r7, pc}
20000132:	46c0      	nop			; (mov r8, r8)
20000134:	40021014 	andmi	r1, r2, r4, lsl r0

20000138 <select_controller>:
 
 static void select_controller(uint8_t controller){
20000138:	b580      	push	{r7, lr}
2000013a:	b082      	sub	sp, #8
2000013c:	af00      	add	r7, sp, #0
2000013e:	0002      	movs	r2, r0
20000140:	1dfb      	adds	r3, r7, #7
20000142:	701a      	strb	r2, [r3, #0]
	 switch(controller){
20000144:	1dfb      	adds	r3, r7, #7
20000146:	781b      	ldrb	r3, [r3, #0]
20000148:	2b18      	cmp	r3, #24
2000014a:	d01a      	beq.n	20000182 <select_controller+0x4a>
2000014c:	dc20      	bgt.n	20000190 <select_controller+0x58>
2000014e:	2b10      	cmp	r3, #16
20000150:	d010      	beq.n	20000174 <select_controller+0x3c>
20000152:	dc1d      	bgt.n	20000190 <select_controller+0x58>
20000154:	2b00      	cmp	r3, #0
20000156:	d002      	beq.n	2000015e <select_controller+0x26>
20000158:	2b08      	cmp	r3, #8
2000015a:	d004      	beq.n	20000166 <select_controller+0x2e>
		 case B_CS1|B_CS2:
			 graphic_ctrl_bit_set(B_CS1);
			 graphic_ctrl_bit_set(B_CS2);
			 break;
	 }
 }
2000015c:	e018      	b.n	20000190 <select_controller+0x58>
			 graphic_ctrl_bit_clear(B_CS1|B_CS2);
2000015e:	2018      	movs	r0, #24
20000160:	f7ff ffc2 	bl	200000e8 <graphic_ctrl_bit_clear>
			 break;
20000164:	e014      	b.n	20000190 <select_controller+0x58>
			 graphic_ctrl_bit_set(B_CS1);
20000166:	2008      	movs	r0, #8
20000168:	f7ff ff96 	bl	20000098 <graphic_ctrl_bit_set>
			 graphic_ctrl_bit_clear(B_CS2);
2000016c:	2010      	movs	r0, #16
2000016e:	f7ff ffbb 	bl	200000e8 <graphic_ctrl_bit_clear>
			 break;
20000172:	e00d      	b.n	20000190 <select_controller+0x58>
			 graphic_ctrl_bit_set(B_CS2);
20000174:	2010      	movs	r0, #16
20000176:	f7ff ff8f 	bl	20000098 <graphic_ctrl_bit_set>
			 graphic_ctrl_bit_clear(B_CS1);
2000017a:	2008      	movs	r0, #8
2000017c:	f7ff ffb4 	bl	200000e8 <graphic_ctrl_bit_clear>
			 break;
20000180:	e006      	b.n	20000190 <select_controller+0x58>
			 graphic_ctrl_bit_set(B_CS1);
20000182:	2008      	movs	r0, #8
20000184:	f7ff ff88 	bl	20000098 <graphic_ctrl_bit_set>
			 graphic_ctrl_bit_set(B_CS2);
20000188:	2010      	movs	r0, #16
2000018a:	f7ff ff85 	bl	20000098 <graphic_ctrl_bit_set>
			 break;
2000018e:	46c0      	nop			; (mov r8, r8)
 }
20000190:	46c0      	nop			; (mov r8, r8)
20000192:	46bd      	mov	sp, r7
20000194:	b002      	add	sp, #8
20000196:	bd80      	pop	{r7, pc}

20000198 <graphic_wait_ready>:
 void graphic_wait_ready(void){
20000198:	b580      	push	{r7, lr}
2000019a:	b082      	sub	sp, #8
2000019c:	af00      	add	r7, sp, #0
	 uint8_t c;
	 graphic_ctrl_bit_clear(B_E);
2000019e:	2040      	movs	r0, #64	; 0x40
200001a0:	f7ff ffa2 	bl	200000e8 <graphic_ctrl_bit_clear>
	 *GPIO_E_MODER = 0x00005555;
200001a4:	4b14      	ldr	r3, [pc, #80]	; (200001f8 <graphic_wait_ready+0x60>)
200001a6:	4a15      	ldr	r2, [pc, #84]	; (200001fc <graphic_wait_ready+0x64>)
200001a8:	601a      	str	r2, [r3, #0]
	 graphic_ctrl_bit_clear(B_RS);
200001aa:	2001      	movs	r0, #1
200001ac:	f7ff ff9c 	bl	200000e8 <graphic_ctrl_bit_clear>
	 graphic_ctrl_bit_set(B_RW);
200001b0:	2002      	movs	r0, #2
200001b2:	f7ff ff71 	bl	20000098 <graphic_ctrl_bit_set>
	 delay_500ns();
200001b6:	f7ff ff30 	bl	2000001a <delay_500ns>
	 
	 while(1){
		 graphic_ctrl_bit_set(B_E);
200001ba:	2040      	movs	r0, #64	; 0x40
200001bc:	f7ff ff6c 	bl	20000098 <graphic_ctrl_bit_set>
		 delay_500ns();
200001c0:	f7ff ff2b 	bl	2000001a <delay_500ns>
		 c = *GPIO_E_IDR_HIGH & LCD_BUSY;
200001c4:	4b0e      	ldr	r3, [pc, #56]	; (20000200 <graphic_wait_ready+0x68>)
200001c6:	781b      	ldrb	r3, [r3, #0]
200001c8:	b2da      	uxtb	r2, r3
200001ca:	1dfb      	adds	r3, r7, #7
200001cc:	217f      	movs	r1, #127	; 0x7f
200001ce:	438a      	bics	r2, r1
200001d0:	701a      	strb	r2, [r3, #0]
		 graphic_ctrl_bit_clear(B_E);
200001d2:	2040      	movs	r0, #64	; 0x40
200001d4:	f7ff ff88 	bl	200000e8 <graphic_ctrl_bit_clear>
		 delay_500ns();
200001d8:	f7ff ff1f 	bl	2000001a <delay_500ns>
		 if(c == 0){
200001dc:	1dfb      	adds	r3, r7, #7
200001de:	781b      	ldrb	r3, [r3, #0]
200001e0:	2b00      	cmp	r3, #0
200001e2:	d000      	beq.n	200001e6 <graphic_wait_ready+0x4e>
		 graphic_ctrl_bit_set(B_E);
200001e4:	e7e9      	b.n	200001ba <graphic_wait_ready+0x22>
			break;
200001e6:	46c0      	nop			; (mov r8, r8)
		 }
	 }
	 //graphic_ctrl_bit_set(B_E); //är med i boken
	 *GPIO_E_MODER = 0x55555555;
200001e8:	4b03      	ldr	r3, [pc, #12]	; (200001f8 <graphic_wait_ready+0x60>)
200001ea:	4a06      	ldr	r2, [pc, #24]	; (20000204 <graphic_wait_ready+0x6c>)
200001ec:	601a      	str	r2, [r3, #0]
	 }
200001ee:	46c0      	nop			; (mov r8, r8)
200001f0:	46bd      	mov	sp, r7
200001f2:	b002      	add	sp, #8
200001f4:	bd80      	pop	{r7, pc}
200001f6:	46c0      	nop			; (mov r8, r8)
200001f8:	40021000 	andmi	r1, r2, r0
200001fc:	00005555 	andeq	r5, r0, r5, asr r5
20000200:	40021011 	andmi	r1, r2, r1, lsl r0
20000204:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000208 <graphic_read>:
 
 uint8_t graphic_read(uint8_t controller){
20000208:	b580      	push	{r7, lr}
2000020a:	b084      	sub	sp, #16
2000020c:	af00      	add	r7, sp, #0
2000020e:	0002      	movs	r2, r0
20000210:	1dfb      	adds	r3, r7, #7
20000212:	701a      	strb	r2, [r3, #0]
	 uint8_t c;
	 graphic_ctrl_bit_clear(B_E);
20000214:	2040      	movs	r0, #64	; 0x40
20000216:	f7ff ff67 	bl	200000e8 <graphic_ctrl_bit_clear>
	 *GPIO_E_MODER = 0x00005555;
2000021a:	4b1d      	ldr	r3, [pc, #116]	; (20000290 <graphic_read+0x88>)
2000021c:	4a1d      	ldr	r2, [pc, #116]	; (20000294 <graphic_read+0x8c>)
2000021e:	601a      	str	r2, [r3, #0]
	 graphic_ctrl_bit_set(B_RS);
20000220:	2001      	movs	r0, #1
20000222:	f7ff ff39 	bl	20000098 <graphic_ctrl_bit_set>
	 graphic_ctrl_bit_set(B_RW);
20000226:	2002      	movs	r0, #2
20000228:	f7ff ff36 	bl	20000098 <graphic_ctrl_bit_set>
	 select_controller(controller);
2000022c:	1dfb      	adds	r3, r7, #7
2000022e:	781b      	ldrb	r3, [r3, #0]
20000230:	0018      	movs	r0, r3
20000232:	f7ff ff81 	bl	20000138 <select_controller>
	 delay_500ns();
20000236:	f7ff fef0 	bl	2000001a <delay_500ns>
	 graphic_ctrl_bit_set(B_E);
2000023a:	2040      	movs	r0, #64	; 0x40
2000023c:	f7ff ff2c 	bl	20000098 <graphic_ctrl_bit_set>
	 delay_500ns();
20000240:	f7ff feeb 	bl	2000001a <delay_500ns>
	 c = *GPIO_E_IDR_HIGH;
20000244:	4a14      	ldr	r2, [pc, #80]	; (20000298 <graphic_read+0x90>)
20000246:	230f      	movs	r3, #15
20000248:	18fb      	adds	r3, r7, r3
2000024a:	7812      	ldrb	r2, [r2, #0]
2000024c:	701a      	strb	r2, [r3, #0]
	 graphic_ctrl_bit_clear(B_E);
2000024e:	2040      	movs	r0, #64	; 0x40
20000250:	f7ff ff4a 	bl	200000e8 <graphic_ctrl_bit_clear>
	 *GPIO_E_MODER = 0x55555555;
20000254:	4b0e      	ldr	r3, [pc, #56]	; (20000290 <graphic_read+0x88>)
20000256:	4a11      	ldr	r2, [pc, #68]	; (2000029c <graphic_read+0x94>)
20000258:	601a      	str	r2, [r3, #0]
	 if(controller & B_CS1){
2000025a:	1dfb      	adds	r3, r7, #7
2000025c:	781b      	ldrb	r3, [r3, #0]
2000025e:	2208      	movs	r2, #8
20000260:	4013      	ands	r3, r2
20000262:	d004      	beq.n	2000026e <graphic_read+0x66>
		 select_controller(B_CS1);
20000264:	2008      	movs	r0, #8
20000266:	f7ff ff67 	bl	20000138 <select_controller>
		 graphic_wait_ready();
2000026a:	f7ff ff95 	bl	20000198 <graphic_wait_ready>
	 }
	 if(controller & B_CS2){
2000026e:	1dfb      	adds	r3, r7, #7
20000270:	781b      	ldrb	r3, [r3, #0]
20000272:	2210      	movs	r2, #16
20000274:	4013      	ands	r3, r2
20000276:	d004      	beq.n	20000282 <graphic_read+0x7a>
		 select_controller(B_CS2);
20000278:	2010      	movs	r0, #16
2000027a:	f7ff ff5d 	bl	20000138 <select_controller>
		 graphic_wait_ready();
2000027e:	f7ff ff8b 	bl	20000198 <graphic_wait_ready>
	 }
	 return c;
20000282:	230f      	movs	r3, #15
20000284:	18fb      	adds	r3, r7, r3
20000286:	781b      	ldrb	r3, [r3, #0]
 }
20000288:	0018      	movs	r0, r3
2000028a:	46bd      	mov	sp, r7
2000028c:	b004      	add	sp, #16
2000028e:	bd80      	pop	{r7, pc}
20000290:	40021000 	andmi	r1, r2, r0
20000294:	00005555 	andeq	r5, r0, r5, asr r5
20000298:	40021011 	andmi	r1, r2, r1, lsl r0
2000029c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002a0 <graphic_write>:
 
 void graphic_write(uint8_t value, uint8_t controller){
200002a0:	b580      	push	{r7, lr}
200002a2:	b082      	sub	sp, #8
200002a4:	af00      	add	r7, sp, #0
200002a6:	0002      	movs	r2, r0
200002a8:	1dfb      	adds	r3, r7, #7
200002aa:	701a      	strb	r2, [r3, #0]
200002ac:	1dbb      	adds	r3, r7, #6
200002ae:	1c0a      	adds	r2, r1, #0
200002b0:	701a      	strb	r2, [r3, #0]
	 *GPIO_E_ODR_HIGH = value;
200002b2:	4a1b      	ldr	r2, [pc, #108]	; (20000320 <graphic_write+0x80>)
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	781b      	ldrb	r3, [r3, #0]
200002b8:	7013      	strb	r3, [r2, #0]
	 select_controller(controller);
200002ba:	1dbb      	adds	r3, r7, #6
200002bc:	781b      	ldrb	r3, [r3, #0]
200002be:	0018      	movs	r0, r3
200002c0:	f7ff ff3a 	bl	20000138 <select_controller>
	 delay_500ns();
200002c4:	f7ff fea9 	bl	2000001a <delay_500ns>
	 graphic_ctrl_bit_set(B_E);
200002c8:	2040      	movs	r0, #64	; 0x40
200002ca:	f7ff fee5 	bl	20000098 <graphic_ctrl_bit_set>
	 delay_500ns();
200002ce:	f7ff fea4 	bl	2000001a <delay_500ns>
	 graphic_ctrl_bit_clear(B_E);
200002d2:	2040      	movs	r0, #64	; 0x40
200002d4:	f7ff ff08 	bl	200000e8 <graphic_ctrl_bit_clear>
	 
	 if(controller & B_CS1){
200002d8:	1dbb      	adds	r3, r7, #6
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	2208      	movs	r2, #8
200002de:	4013      	ands	r3, r2
200002e0:	d004      	beq.n	200002ec <graphic_write+0x4c>
		 select_controller(B_CS1);
200002e2:	2008      	movs	r0, #8
200002e4:	f7ff ff28 	bl	20000138 <select_controller>
		 graphic_wait_ready();
200002e8:	f7ff ff56 	bl	20000198 <graphic_wait_ready>
	 }
	 if(controller & B_CS2){
200002ec:	1dbb      	adds	r3, r7, #6
200002ee:	781b      	ldrb	r3, [r3, #0]
200002f0:	2210      	movs	r2, #16
200002f2:	4013      	ands	r3, r2
200002f4:	d004      	beq.n	20000300 <graphic_write+0x60>
		 select_controller(B_CS2);
200002f6:	2010      	movs	r0, #16
200002f8:	f7ff ff1e 	bl	20000138 <select_controller>
		 graphic_wait_ready();
200002fc:	f7ff ff4c 	bl	20000198 <graphic_wait_ready>
	 }
	  *GPIO_E_ODR_HIGH &= 0;
20000300:	4b07      	ldr	r3, [pc, #28]	; (20000320 <graphic_write+0x80>)
20000302:	781b      	ldrb	r3, [r3, #0]
20000304:	4b06      	ldr	r3, [pc, #24]	; (20000320 <graphic_write+0x80>)
20000306:	2200      	movs	r2, #0
20000308:	701a      	strb	r2, [r3, #0]
	 graphic_ctrl_bit_set(B_E);
2000030a:	2040      	movs	r0, #64	; 0x40
2000030c:	f7ff fec4 	bl	20000098 <graphic_ctrl_bit_set>
	 select_controller(0); 
20000310:	2000      	movs	r0, #0
20000312:	f7ff ff11 	bl	20000138 <select_controller>
 }
20000316:	46c0      	nop			; (mov r8, r8)
20000318:	46bd      	mov	sp, r7
2000031a:	b002      	add	sp, #8
2000031c:	bd80      	pop	{r7, pc}
2000031e:	46c0      	nop			; (mov r8, r8)
20000320:	40021015 	andmi	r1, r2, r5, lsl r0

20000324 <graphic_write_command>:
 
 void graphic_write_command(uint8_t command, uint8_t controller){
20000324:	b580      	push	{r7, lr}
20000326:	b082      	sub	sp, #8
20000328:	af00      	add	r7, sp, #0
2000032a:	0002      	movs	r2, r0
2000032c:	1dfb      	adds	r3, r7, #7
2000032e:	701a      	strb	r2, [r3, #0]
20000330:	1dbb      	adds	r3, r7, #6
20000332:	1c0a      	adds	r2, r1, #0
20000334:	701a      	strb	r2, [r3, #0]
	 graphic_ctrl_bit_clear(B_E);
20000336:	2040      	movs	r0, #64	; 0x40
20000338:	f7ff fed6 	bl	200000e8 <graphic_ctrl_bit_clear>
	 select_controller(controller);
2000033c:	1dbb      	adds	r3, r7, #6
2000033e:	781b      	ldrb	r3, [r3, #0]
20000340:	0018      	movs	r0, r3
20000342:	f7ff fef9 	bl	20000138 <select_controller>
	 graphic_ctrl_bit_clear(B_RS);
20000346:	2001      	movs	r0, #1
20000348:	f7ff fece 	bl	200000e8 <graphic_ctrl_bit_clear>
	 graphic_ctrl_bit_clear(B_RW);
2000034c:	2002      	movs	r0, #2
2000034e:	f7ff fecb 	bl	200000e8 <graphic_ctrl_bit_clear>
	 graphic_write(command, controller);
20000352:	1dbb      	adds	r3, r7, #6
20000354:	781a      	ldrb	r2, [r3, #0]
20000356:	1dfb      	adds	r3, r7, #7
20000358:	781b      	ldrb	r3, [r3, #0]
2000035a:	0011      	movs	r1, r2
2000035c:	0018      	movs	r0, r3
2000035e:	f7ff ff9f 	bl	200002a0 <graphic_write>
 }
20000362:	46c0      	nop			; (mov r8, r8)
20000364:	46bd      	mov	sp, r7
20000366:	b002      	add	sp, #8
20000368:	bd80      	pop	{r7, pc}

2000036a <graphic_write_data>:
 
 void graphic_write_data(uint8_t data, uint8_t controller){
2000036a:	b580      	push	{r7, lr}
2000036c:	b082      	sub	sp, #8
2000036e:	af00      	add	r7, sp, #0
20000370:	0002      	movs	r2, r0
20000372:	1dfb      	adds	r3, r7, #7
20000374:	701a      	strb	r2, [r3, #0]
20000376:	1dbb      	adds	r3, r7, #6
20000378:	1c0a      	adds	r2, r1, #0
2000037a:	701a      	strb	r2, [r3, #0]
	 graphic_ctrl_bit_clear(B_E);
2000037c:	2040      	movs	r0, #64	; 0x40
2000037e:	f7ff feb3 	bl	200000e8 <graphic_ctrl_bit_clear>
	 select_controller(controller);
20000382:	1dbb      	adds	r3, r7, #6
20000384:	781b      	ldrb	r3, [r3, #0]
20000386:	0018      	movs	r0, r3
20000388:	f7ff fed6 	bl	20000138 <select_controller>
	 graphic_ctrl_bit_set(B_RS);
2000038c:	2001      	movs	r0, #1
2000038e:	f7ff fe83 	bl	20000098 <graphic_ctrl_bit_set>
	 graphic_ctrl_bit_clear(B_RW);
20000392:	2002      	movs	r0, #2
20000394:	f7ff fea8 	bl	200000e8 <graphic_ctrl_bit_clear>
	 graphic_write(data, controller);
20000398:	1dbb      	adds	r3, r7, #6
2000039a:	781a      	ldrb	r2, [r3, #0]
2000039c:	1dfb      	adds	r3, r7, #7
2000039e:	781b      	ldrb	r3, [r3, #0]
200003a0:	0011      	movs	r1, r2
200003a2:	0018      	movs	r0, r3
200003a4:	f7ff ff7c 	bl	200002a0 <graphic_write>
 }
200003a8:	46c0      	nop			; (mov r8, r8)
200003aa:	46bd      	mov	sp, r7
200003ac:	b002      	add	sp, #8
200003ae:	bd80      	pop	{r7, pc}

200003b0 <graphic_read_data>:
 
 unsigned char graphic_read_data(unsigned char controller){
200003b0:	b580      	push	{r7, lr}
200003b2:	b082      	sub	sp, #8
200003b4:	af00      	add	r7, sp, #0
200003b6:	0002      	movs	r2, r0
200003b8:	1dfb      	adds	r3, r7, #7
200003ba:	701a      	strb	r2, [r3, #0]
	 (void) graphic_read(controller);
200003bc:	1dfb      	adds	r3, r7, #7
200003be:	781b      	ldrb	r3, [r3, #0]
200003c0:	0018      	movs	r0, r3
200003c2:	f7ff ff21 	bl	20000208 <graphic_read>
	 return graphic_read(controller);
200003c6:	1dfb      	adds	r3, r7, #7
200003c8:	781b      	ldrb	r3, [r3, #0]
200003ca:	0018      	movs	r0, r3
200003cc:	f7ff ff1c 	bl	20000208 <graphic_read>
200003d0:	0003      	movs	r3, r0
 }
200003d2:	0018      	movs	r0, r3
200003d4:	46bd      	mov	sp, r7
200003d6:	b002      	add	sp, #8
200003d8:	bd80      	pop	{r7, pc}

200003da <init_app>:
 

 
 void init_app(){
200003da:	b580      	push	{r7, lr}
200003dc:	af00      	add	r7, sp, #0
	 *(GPIO_E_MODER) = 0x55555555;
200003de:	4b03      	ldr	r3, [pc, #12]	; (200003ec <init_app+0x12>)
200003e0:	4a03      	ldr	r2, [pc, #12]	; (200003f0 <init_app+0x16>)
200003e2:	601a      	str	r2, [r3, #0]
 }
200003e4:	46c0      	nop			; (mov r8, r8)
200003e6:	46bd      	mov	sp, r7
200003e8:	bd80      	pop	{r7, pc}
200003ea:	46c0      	nop			; (mov r8, r8)
200003ec:	40021000 	andmi	r1, r2, r0
200003f0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003f4 <graphic_initalize>:
 
 void graphic_initalize(void){
200003f4:	b580      	push	{r7, lr}
200003f6:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200003f8:	2040      	movs	r0, #64	; 0x40
200003fa:	f7ff fe4d 	bl	20000098 <graphic_ctrl_bit_set>
	delay_mikro(10);
200003fe:	200a      	movs	r0, #10
20000400:	f7ff fe14 	bl	2000002c <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1);
20000404:	2008      	movs	r0, #8
20000406:	f7ff fe6f 	bl	200000e8 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
2000040a:	2010      	movs	r0, #16
2000040c:	f7ff fe6c 	bl	200000e8 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20000410:	2020      	movs	r0, #32
20000412:	f7ff fe69 	bl	200000e8 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
20000416:	2040      	movs	r0, #64	; 0x40
20000418:	f7ff fe66 	bl	200000e8 <graphic_ctrl_bit_clear>
	delay_milli(30);
2000041c:	201e      	movs	r0, #30
2000041e:	f7ff fe1c 	bl	2000005a <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000422:	2020      	movs	r0, #32
20000424:	f7ff fe38 	bl	20000098 <graphic_ctrl_bit_set>
	delay_milli(100); //kan vara onödig
20000428:	2064      	movs	r0, #100	; 0x64
2000042a:	f7ff fe16 	bl	2000005a <delay_milli>
	graphic_write_command(LCD_OFF,        B_CS1|B_CS2);
2000042e:	2118      	movs	r1, #24
20000430:	203e      	movs	r0, #62	; 0x3e
20000432:	f7ff ff77 	bl	20000324 <graphic_write_command>
	graphic_write_command(LCD_ON,         B_CS1|B_CS2);
20000436:	2118      	movs	r1, #24
20000438:	203f      	movs	r0, #63	; 0x3f
2000043a:	f7ff ff73 	bl	20000324 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
2000043e:	2118      	movs	r1, #24
20000440:	20c0      	movs	r0, #192	; 0xc0
20000442:	f7ff ff6f 	bl	20000324 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD,    B_CS1|B_CS2);
20000446:	2118      	movs	r1, #24
20000448:	2040      	movs	r0, #64	; 0x40
2000044a:	f7ff ff6b 	bl	20000324 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE,   B_CS1|B_CS2);
2000044e:	2118      	movs	r1, #24
20000450:	20b8      	movs	r0, #184	; 0xb8
20000452:	f7ff ff67 	bl	20000324 <graphic_write_command>
	select_controller(0);
20000456:	2000      	movs	r0, #0
20000458:	f7ff fe6e 	bl	20000138 <select_controller>
 }
2000045c:	46c0      	nop			; (mov r8, r8)
2000045e:	46bd      	mov	sp, r7
20000460:	bd80      	pop	{r7, pc}

20000462 <graphic_clear_screen>:
 
 void graphic_clear_screen(void){
20000462:	b580      	push	{r7, lr}
20000464:	b082      	sub	sp, #8
20000466:	af00      	add	r7, sp, #0
	 uint8_t page, add;
	 
	 for(page = 0; page<8;page++){
20000468:	1dfb      	adds	r3, r7, #7
2000046a:	2200      	movs	r2, #0
2000046c:	701a      	strb	r2, [r3, #0]
2000046e:	e023      	b.n	200004b8 <graphic_clear_screen+0x56>
		 graphic_write_command(LCD_SET_PAGE|page, B_CS1|B_CS2);
20000470:	1dfb      	adds	r3, r7, #7
20000472:	781b      	ldrb	r3, [r3, #0]
20000474:	2248      	movs	r2, #72	; 0x48
20000476:	4252      	negs	r2, r2
20000478:	4313      	orrs	r3, r2
2000047a:	b2db      	uxtb	r3, r3
2000047c:	2118      	movs	r1, #24
2000047e:	0018      	movs	r0, r3
20000480:	f7ff ff50 	bl	20000324 <graphic_write_command>
		 graphic_write_command(LCD_SET_ADD|0, B_CS1|B_CS2);
20000484:	2118      	movs	r1, #24
20000486:	2040      	movs	r0, #64	; 0x40
20000488:	f7ff ff4c 	bl	20000324 <graphic_write_command>
		 for(add = 0; add<64; add++){
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	2200      	movs	r2, #0
20000490:	701a      	strb	r2, [r3, #0]
20000492:	e008      	b.n	200004a6 <graphic_clear_screen+0x44>
			 graphic_write_data(0, B_CS1|B_CS2);
20000494:	2118      	movs	r1, #24
20000496:	2000      	movs	r0, #0
20000498:	f7ff ff67 	bl	2000036a <graphic_write_data>
		 for(add = 0; add<64; add++){
2000049c:	1dbb      	adds	r3, r7, #6
2000049e:	781a      	ldrb	r2, [r3, #0]
200004a0:	1dbb      	adds	r3, r7, #6
200004a2:	3201      	adds	r2, #1
200004a4:	701a      	strb	r2, [r3, #0]
200004a6:	1dbb      	adds	r3, r7, #6
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	2b3f      	cmp	r3, #63	; 0x3f
200004ac:	d9f2      	bls.n	20000494 <graphic_clear_screen+0x32>
	 for(page = 0; page<8;page++){
200004ae:	1dfb      	adds	r3, r7, #7
200004b0:	781a      	ldrb	r2, [r3, #0]
200004b2:	1dfb      	adds	r3, r7, #7
200004b4:	3201      	adds	r2, #1
200004b6:	701a      	strb	r2, [r3, #0]
200004b8:	1dfb      	adds	r3, r7, #7
200004ba:	781b      	ldrb	r3, [r3, #0]
200004bc:	2b07      	cmp	r3, #7
200004be:	d9d7      	bls.n	20000470 <graphic_clear_screen+0xe>
		 }
	 }
 }
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	46c0      	nop			; (mov r8, r8)
200004c4:	46bd      	mov	sp, r7
200004c6:	b002      	add	sp, #8
200004c8:	bd80      	pop	{r7, pc}

200004ca <pixel>:
 
 void pixel(unsigned x, unsigned y, unsigned set){
200004ca:	b5f0      	push	{r4, r5, r6, r7, lr}
200004cc:	b089      	sub	sp, #36	; 0x24
200004ce:	af00      	add	r7, sp, #0
200004d0:	60f8      	str	r0, [r7, #12]
200004d2:	60b9      	str	r1, [r7, #8]
200004d4:	607a      	str	r2, [r7, #4]
	 uint8_t mask, temp, controller;
	 int index = ((y-1)/8);
200004d6:	68bb      	ldr	r3, [r7, #8]
200004d8:	3b01      	subs	r3, #1
200004da:	08db      	lsrs	r3, r3, #3
200004dc:	61bb      	str	r3, [r7, #24]
	 
	 if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200004de:	68fb      	ldr	r3, [r7, #12]
200004e0:	2b00      	cmp	r3, #0
200004e2:	d100      	bne.n	200004e6 <pixel+0x1c>
200004e4:	e0a6      	b.n	20000634 <pixel+0x16a>
200004e6:	68bb      	ldr	r3, [r7, #8]
200004e8:	2b00      	cmp	r3, #0
200004ea:	d100      	bne.n	200004ee <pixel+0x24>
200004ec:	e0a2      	b.n	20000634 <pixel+0x16a>
200004ee:	68fb      	ldr	r3, [r7, #12]
200004f0:	2b80      	cmp	r3, #128	; 0x80
200004f2:	d900      	bls.n	200004f6 <pixel+0x2c>
200004f4:	e09e      	b.n	20000634 <pixel+0x16a>
200004f6:	68bb      	ldr	r3, [r7, #8]
200004f8:	2b40      	cmp	r3, #64	; 0x40
200004fa:	d900      	bls.n	200004fe <pixel+0x34>
200004fc:	e09a      	b.n	20000634 <pixel+0x16a>
	 
	 switch((y-1)%8){
200004fe:	68bb      	ldr	r3, [r7, #8]
20000500:	3b01      	subs	r3, #1
20000502:	2207      	movs	r2, #7
20000504:	4013      	ands	r3, r2
20000506:	2b07      	cmp	r3, #7
20000508:	d82c      	bhi.n	20000564 <pixel+0x9a>
2000050a:	009a      	lsls	r2, r3, #2
2000050c:	4b4b      	ldr	r3, [pc, #300]	; (2000063c <pixel+0x172>)
2000050e:	18d3      	adds	r3, r2, r3
20000510:	681b      	ldr	r3, [r3, #0]
20000512:	469f      	mov	pc, r3
		case 0:mask = 1;break;
20000514:	231f      	movs	r3, #31
20000516:	18fb      	adds	r3, r7, r3
20000518:	2201      	movs	r2, #1
2000051a:	701a      	strb	r2, [r3, #0]
2000051c:	e022      	b.n	20000564 <pixel+0x9a>
		case 1:mask = 2;break;
2000051e:	231f      	movs	r3, #31
20000520:	18fb      	adds	r3, r7, r3
20000522:	2202      	movs	r2, #2
20000524:	701a      	strb	r2, [r3, #0]
20000526:	e01d      	b.n	20000564 <pixel+0x9a>
		case 2:mask = 4;break;
20000528:	231f      	movs	r3, #31
2000052a:	18fb      	adds	r3, r7, r3
2000052c:	2204      	movs	r2, #4
2000052e:	701a      	strb	r2, [r3, #0]
20000530:	e018      	b.n	20000564 <pixel+0x9a>
		case 3:mask = 8;break;
20000532:	231f      	movs	r3, #31
20000534:	18fb      	adds	r3, r7, r3
20000536:	2208      	movs	r2, #8
20000538:	701a      	strb	r2, [r3, #0]
2000053a:	e013      	b.n	20000564 <pixel+0x9a>
		case 4:mask = 0x10;break;
2000053c:	231f      	movs	r3, #31
2000053e:	18fb      	adds	r3, r7, r3
20000540:	2210      	movs	r2, #16
20000542:	701a      	strb	r2, [r3, #0]
20000544:	e00e      	b.n	20000564 <pixel+0x9a>
		case 5:mask = 0x20;break;
20000546:	231f      	movs	r3, #31
20000548:	18fb      	adds	r3, r7, r3
2000054a:	2220      	movs	r2, #32
2000054c:	701a      	strb	r2, [r3, #0]
2000054e:	e009      	b.n	20000564 <pixel+0x9a>
		case 6:mask = 0x40;break;
20000550:	231f      	movs	r3, #31
20000552:	18fb      	adds	r3, r7, r3
20000554:	2240      	movs	r2, #64	; 0x40
20000556:	701a      	strb	r2, [r3, #0]
20000558:	e004      	b.n	20000564 <pixel+0x9a>
		case 7:mask = 0x80;break;
2000055a:	231f      	movs	r3, #31
2000055c:	18fb      	adds	r3, r7, r3
2000055e:	2280      	movs	r2, #128	; 0x80
20000560:	701a      	strb	r2, [r3, #0]
20000562:	46c0      	nop			; (mov r8, r8)
	 }
	 if(set == 0){
20000564:	687b      	ldr	r3, [r7, #4]
20000566:	2b00      	cmp	r3, #0
20000568:	d105      	bne.n	20000576 <pixel+0xac>
		 mask = ~mask;
2000056a:	221f      	movs	r2, #31
2000056c:	18bb      	adds	r3, r7, r2
2000056e:	18ba      	adds	r2, r7, r2
20000570:	7812      	ldrb	r2, [r2, #0]
20000572:	43d2      	mvns	r2, r2
20000574:	701a      	strb	r2, [r3, #0]
	 }
	 if(x > 64){
20000576:	68fb      	ldr	r3, [r7, #12]
20000578:	2b40      	cmp	r3, #64	; 0x40
2000057a:	d907      	bls.n	2000058c <pixel+0xc2>
		 controller = B_CS2;
2000057c:	231e      	movs	r3, #30
2000057e:	18fb      	adds	r3, r7, r3
20000580:	2210      	movs	r2, #16
20000582:	701a      	strb	r2, [r3, #0]
		 x = x-65;
20000584:	68fb      	ldr	r3, [r7, #12]
20000586:	3b41      	subs	r3, #65	; 0x41
20000588:	60fb      	str	r3, [r7, #12]
2000058a:	e006      	b.n	2000059a <pixel+0xd0>
	 } else{
		 controller = B_CS1;
2000058c:	231e      	movs	r3, #30
2000058e:	18fb      	adds	r3, r7, r3
20000590:	2208      	movs	r2, #8
20000592:	701a      	strb	r2, [r3, #0]
		 x = x-1;
20000594:	68fb      	ldr	r3, [r7, #12]
20000596:	3b01      	subs	r3, #1
20000598:	60fb      	str	r3, [r7, #12]
	 }
	 graphic_write_command(LCD_SET_ADD | x, controller);
2000059a:	68fb      	ldr	r3, [r7, #12]
2000059c:	b2db      	uxtb	r3, r3
2000059e:	2240      	movs	r2, #64	; 0x40
200005a0:	4313      	orrs	r3, r2
200005a2:	b2da      	uxtb	r2, r3
200005a4:	251e      	movs	r5, #30
200005a6:	197b      	adds	r3, r7, r5
200005a8:	781b      	ldrb	r3, [r3, #0]
200005aa:	0019      	movs	r1, r3
200005ac:	0010      	movs	r0, r2
200005ae:	f7ff feb9 	bl	20000324 <graphic_write_command>
	 graphic_write_command(LCD_SET_PAGE | index, controller);
200005b2:	69bb      	ldr	r3, [r7, #24]
200005b4:	b25b      	sxtb	r3, r3
200005b6:	2248      	movs	r2, #72	; 0x48
200005b8:	4252      	negs	r2, r2
200005ba:	4313      	orrs	r3, r2
200005bc:	b25b      	sxtb	r3, r3
200005be:	b2da      	uxtb	r2, r3
200005c0:	197b      	adds	r3, r7, r5
200005c2:	781b      	ldrb	r3, [r3, #0]
200005c4:	0019      	movs	r1, r3
200005c6:	0010      	movs	r0, r2
200005c8:	f7ff feac 	bl	20000324 <graphic_write_command>
	 temp = graphic_read_data(controller);
200005cc:	2617      	movs	r6, #23
200005ce:	19bc      	adds	r4, r7, r6
200005d0:	197b      	adds	r3, r7, r5
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	0018      	movs	r0, r3
200005d6:	f7ff feeb 	bl	200003b0 <graphic_read_data>
200005da:	0003      	movs	r3, r0
200005dc:	7023      	strb	r3, [r4, #0]
	 graphic_write_command(LCD_SET_ADD|x, controller);
200005de:	68fb      	ldr	r3, [r7, #12]
200005e0:	b2db      	uxtb	r3, r3
200005e2:	2240      	movs	r2, #64	; 0x40
200005e4:	4313      	orrs	r3, r2
200005e6:	b2da      	uxtb	r2, r3
200005e8:	197b      	adds	r3, r7, r5
200005ea:	781b      	ldrb	r3, [r3, #0]
200005ec:	0019      	movs	r1, r3
200005ee:	0010      	movs	r0, r2
200005f0:	f7ff fe98 	bl	20000324 <graphic_write_command>
	 if(set){
200005f4:	687b      	ldr	r3, [r7, #4]
200005f6:	2b00      	cmp	r3, #0
200005f8:	d008      	beq.n	2000060c <pixel+0x142>
		 mask |= temp;
200005fa:	221f      	movs	r2, #31
200005fc:	18bb      	adds	r3, r7, r2
200005fe:	18b9      	adds	r1, r7, r2
20000600:	19ba      	adds	r2, r7, r6
20000602:	7809      	ldrb	r1, [r1, #0]
20000604:	7812      	ldrb	r2, [r2, #0]
20000606:	430a      	orrs	r2, r1
20000608:	701a      	strb	r2, [r3, #0]
2000060a:	e008      	b.n	2000061e <pixel+0x154>
	 } else{
		 mask &= temp;
2000060c:	221f      	movs	r2, #31
2000060e:	18bb      	adds	r3, r7, r2
20000610:	18ba      	adds	r2, r7, r2
20000612:	2117      	movs	r1, #23
20000614:	1879      	adds	r1, r7, r1
20000616:	7812      	ldrb	r2, [r2, #0]
20000618:	7809      	ldrb	r1, [r1, #0]
2000061a:	400a      	ands	r2, r1
2000061c:	701a      	strb	r2, [r3, #0]
	 }
	 graphic_write_data(mask, controller);
2000061e:	231e      	movs	r3, #30
20000620:	18fb      	adds	r3, r7, r3
20000622:	781a      	ldrb	r2, [r3, #0]
20000624:	231f      	movs	r3, #31
20000626:	18fb      	adds	r3, r7, r3
20000628:	781b      	ldrb	r3, [r3, #0]
2000062a:	0011      	movs	r1, r2
2000062c:	0018      	movs	r0, r3
2000062e:	f7ff fe9c 	bl	2000036a <graphic_write_data>
20000632:	e000      	b.n	20000636 <pixel+0x16c>
	 if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000634:	46c0      	nop			; (mov r8, r8)
 }
20000636:	46bd      	mov	sp, r7
20000638:	b009      	add	sp, #36	; 0x24
2000063a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000063c:	20000948 	andcs	r0, r0, r8, asr #18

20000640 <set_object_speed>:
	 void (*clear) (struct tObj *);
	 void (*move) (struct tObj *);
	 void (*set_speed)(struct tObj *, int, int);
 } OBJECT, *POBJECT;
 
 void set_object_speed(POBJECT o, int speedx, int speedy){
20000640:	b580      	push	{r7, lr}
20000642:	b084      	sub	sp, #16
20000644:	af00      	add	r7, sp, #0
20000646:	60f8      	str	r0, [r7, #12]
20000648:	60b9      	str	r1, [r7, #8]
2000064a:	607a      	str	r2, [r7, #4]
	 o->dirx = speedx;
2000064c:	68fb      	ldr	r3, [r7, #12]
2000064e:	68ba      	ldr	r2, [r7, #8]
20000650:	605a      	str	r2, [r3, #4]
	 o->diry = speedy;
20000652:	68fb      	ldr	r3, [r7, #12]
20000654:	687a      	ldr	r2, [r7, #4]
20000656:	609a      	str	r2, [r3, #8]
 }
20000658:	46c0      	nop			; (mov r8, r8)
2000065a:	46bd      	mov	sp, r7
2000065c:	b004      	add	sp, #16
2000065e:	bd80      	pop	{r7, pc}

20000660 <draw_object>:
 void draw_object(POBJECT o){
20000660:	b580      	push	{r7, lr}
20000662:	b084      	sub	sp, #16
20000664:	af00      	add	r7, sp, #0
20000666:	6078      	str	r0, [r7, #4]
	 for(int i = 0; i < o->geo->numpoints; i++){
20000668:	2300      	movs	r3, #0
2000066a:	60fb      	str	r3, [r7, #12]
2000066c:	e01d      	b.n	200006aa <draw_object+0x4a>
		 pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y, 1);
2000066e:	687b      	ldr	r3, [r7, #4]
20000670:	68da      	ldr	r2, [r3, #12]
20000672:	687b      	ldr	r3, [r7, #4]
20000674:	6819      	ldr	r1, [r3, #0]
20000676:	68fb      	ldr	r3, [r7, #12]
20000678:	3304      	adds	r3, #4
2000067a:	005b      	lsls	r3, r3, #1
2000067c:	18cb      	adds	r3, r1, r3
2000067e:	3304      	adds	r3, #4
20000680:	781b      	ldrb	r3, [r3, #0]
20000682:	18d3      	adds	r3, r2, r3
20000684:	0018      	movs	r0, r3
20000686:	687b      	ldr	r3, [r7, #4]
20000688:	691a      	ldr	r2, [r3, #16]
2000068a:	687b      	ldr	r3, [r7, #4]
2000068c:	6819      	ldr	r1, [r3, #0]
2000068e:	68fb      	ldr	r3, [r7, #12]
20000690:	3304      	adds	r3, #4
20000692:	005b      	lsls	r3, r3, #1
20000694:	18cb      	adds	r3, r1, r3
20000696:	3305      	adds	r3, #5
20000698:	781b      	ldrb	r3, [r3, #0]
2000069a:	18d3      	adds	r3, r2, r3
2000069c:	2201      	movs	r2, #1
2000069e:	0019      	movs	r1, r3
200006a0:	f7ff ff13 	bl	200004ca <pixel>
	 for(int i = 0; i < o->geo->numpoints; i++){
200006a4:	68fb      	ldr	r3, [r7, #12]
200006a6:	3301      	adds	r3, #1
200006a8:	60fb      	str	r3, [r7, #12]
200006aa:	687b      	ldr	r3, [r7, #4]
200006ac:	681b      	ldr	r3, [r3, #0]
200006ae:	681b      	ldr	r3, [r3, #0]
200006b0:	68fa      	ldr	r2, [r7, #12]
200006b2:	429a      	cmp	r2, r3
200006b4:	dbdb      	blt.n	2000066e <draw_object+0xe>
	 }
 }
200006b6:	46c0      	nop			; (mov r8, r8)
200006b8:	46c0      	nop			; (mov r8, r8)
200006ba:	46bd      	mov	sp, r7
200006bc:	b004      	add	sp, #16
200006be:	bd80      	pop	{r7, pc}

200006c0 <clear_object>:
 void clear_object(POBJECT o){
200006c0:	b580      	push	{r7, lr}
200006c2:	b084      	sub	sp, #16
200006c4:	af00      	add	r7, sp, #0
200006c6:	6078      	str	r0, [r7, #4]
	 for(int i = 0; i< o->geo->numpoints; i++){
200006c8:	2300      	movs	r3, #0
200006ca:	60fb      	str	r3, [r7, #12]
200006cc:	e01d      	b.n	2000070a <clear_object+0x4a>
		 pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y, 0);
200006ce:	687b      	ldr	r3, [r7, #4]
200006d0:	68da      	ldr	r2, [r3, #12]
200006d2:	687b      	ldr	r3, [r7, #4]
200006d4:	6819      	ldr	r1, [r3, #0]
200006d6:	68fb      	ldr	r3, [r7, #12]
200006d8:	3304      	adds	r3, #4
200006da:	005b      	lsls	r3, r3, #1
200006dc:	18cb      	adds	r3, r1, r3
200006de:	3304      	adds	r3, #4
200006e0:	781b      	ldrb	r3, [r3, #0]
200006e2:	18d3      	adds	r3, r2, r3
200006e4:	0018      	movs	r0, r3
200006e6:	687b      	ldr	r3, [r7, #4]
200006e8:	691a      	ldr	r2, [r3, #16]
200006ea:	687b      	ldr	r3, [r7, #4]
200006ec:	6819      	ldr	r1, [r3, #0]
200006ee:	68fb      	ldr	r3, [r7, #12]
200006f0:	3304      	adds	r3, #4
200006f2:	005b      	lsls	r3, r3, #1
200006f4:	18cb      	adds	r3, r1, r3
200006f6:	3305      	adds	r3, #5
200006f8:	781b      	ldrb	r3, [r3, #0]
200006fa:	18d3      	adds	r3, r2, r3
200006fc:	2200      	movs	r2, #0
200006fe:	0019      	movs	r1, r3
20000700:	f7ff fee3 	bl	200004ca <pixel>
	 for(int i = 0; i< o->geo->numpoints; i++){
20000704:	68fb      	ldr	r3, [r7, #12]
20000706:	3301      	adds	r3, #1
20000708:	60fb      	str	r3, [r7, #12]
2000070a:	687b      	ldr	r3, [r7, #4]
2000070c:	681b      	ldr	r3, [r3, #0]
2000070e:	681b      	ldr	r3, [r3, #0]
20000710:	68fa      	ldr	r2, [r7, #12]
20000712:	429a      	cmp	r2, r3
20000714:	dbdb      	blt.n	200006ce <clear_object+0xe>
	 }
 }
20000716:	46c0      	nop			; (mov r8, r8)
20000718:	46c0      	nop			; (mov r8, r8)
2000071a:	46bd      	mov	sp, r7
2000071c:	b004      	add	sp, #16
2000071e:	bd80      	pop	{r7, pc}

20000720 <move_object>:
 void move_object(POBJECT o){
20000720:	b580      	push	{r7, lr}
20000722:	b082      	sub	sp, #8
20000724:	af00      	add	r7, sp, #0
20000726:	6078      	str	r0, [r7, #4]
	 clear_object(o);
20000728:	687b      	ldr	r3, [r7, #4]
2000072a:	0018      	movs	r0, r3
2000072c:	f7ff ffc8 	bl	200006c0 <clear_object>
	 o->posx += o->dirx;
20000730:	687b      	ldr	r3, [r7, #4]
20000732:	68da      	ldr	r2, [r3, #12]
20000734:	687b      	ldr	r3, [r7, #4]
20000736:	685b      	ldr	r3, [r3, #4]
20000738:	18d2      	adds	r2, r2, r3
2000073a:	687b      	ldr	r3, [r7, #4]
2000073c:	60da      	str	r2, [r3, #12]
	 o->posy += o->diry;
2000073e:	687b      	ldr	r3, [r7, #4]
20000740:	691a      	ldr	r2, [r3, #16]
20000742:	687b      	ldr	r3, [r7, #4]
20000744:	689b      	ldr	r3, [r3, #8]
20000746:	18d2      	adds	r2, r2, r3
20000748:	687b      	ldr	r3, [r7, #4]
2000074a:	611a      	str	r2, [r3, #16]
	 if(o->posx < 1){
2000074c:	687b      	ldr	r3, [r7, #4]
2000074e:	68db      	ldr	r3, [r3, #12]
20000750:	2b00      	cmp	r3, #0
20000752:	dc04      	bgt.n	2000075e <move_object+0x3e>
		 o->dirx *= -1;
20000754:	687b      	ldr	r3, [r7, #4]
20000756:	685b      	ldr	r3, [r3, #4]
20000758:	425a      	negs	r2, r3
2000075a:	687b      	ldr	r3, [r7, #4]
2000075c:	605a      	str	r2, [r3, #4]
	 }
	 if(o->posx > 128){
2000075e:	687b      	ldr	r3, [r7, #4]
20000760:	68db      	ldr	r3, [r3, #12]
20000762:	2b80      	cmp	r3, #128	; 0x80
20000764:	dd04      	ble.n	20000770 <move_object+0x50>
		 o->dirx *= -1;
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	685b      	ldr	r3, [r3, #4]
2000076a:	425a      	negs	r2, r3
2000076c:	687b      	ldr	r3, [r7, #4]
2000076e:	605a      	str	r2, [r3, #4]
	 }
	 if(o->posy < 1){
20000770:	687b      	ldr	r3, [r7, #4]
20000772:	691b      	ldr	r3, [r3, #16]
20000774:	2b00      	cmp	r3, #0
20000776:	dc04      	bgt.n	20000782 <move_object+0x62>
		 o->diry *= -1;
20000778:	687b      	ldr	r3, [r7, #4]
2000077a:	689b      	ldr	r3, [r3, #8]
2000077c:	425a      	negs	r2, r3
2000077e:	687b      	ldr	r3, [r7, #4]
20000780:	609a      	str	r2, [r3, #8]
	 }
	 if(o->posy > 64){
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	691b      	ldr	r3, [r3, #16]
20000786:	2b40      	cmp	r3, #64	; 0x40
20000788:	dd04      	ble.n	20000794 <move_object+0x74>
		 o->posy *= -1;
2000078a:	687b      	ldr	r3, [r7, #4]
2000078c:	691b      	ldr	r3, [r3, #16]
2000078e:	425a      	negs	r2, r3
20000790:	687b      	ldr	r3, [r7, #4]
20000792:	611a      	str	r2, [r3, #16]
	 }
	 draw_object(o);
20000794:	687b      	ldr	r3, [r7, #4]
20000796:	0018      	movs	r0, r3
20000798:	f7ff ff62 	bl	20000660 <draw_object>
 }
2000079c:	46c0      	nop			; (mov r8, r8)
2000079e:	46bd      	mov	sp, r7
200007a0:	b002      	add	sp, #8
200007a2:	bd80      	pop	{r7, pc}

200007a4 <main>:
	 move_object,
	 set_object_speed
 };
 
void main(void)
{
200007a4:	b580      	push	{r7, lr}
200007a6:	b082      	sub	sp, #8
200007a8:	af00      	add	r7, sp, #0
	 POBJECT p = &ball;
200007aa:	4b0a      	ldr	r3, [pc, #40]	; (200007d4 <main+0x30>)
200007ac:	607b      	str	r3, [r7, #4]
	 init_app();
200007ae:	f7ff fe14 	bl	200003da <init_app>
	 graphic_initalize();
200007b2:	f7ff fe1f 	bl	200003f4 <graphic_initalize>
 #ifndef SIMULATOR
	 graphic_clear_screen();
 #endif
	 p->set_speed(p, 4, 1);
200007b6:	687b      	ldr	r3, [r7, #4]
200007b8:	6a1b      	ldr	r3, [r3, #32]
200007ba:	6878      	ldr	r0, [r7, #4]
200007bc:	2201      	movs	r2, #1
200007be:	2104      	movs	r1, #4
200007c0:	4798      	blx	r3
	 while(1){
		 p->move(p);
200007c2:	687b      	ldr	r3, [r7, #4]
200007c4:	69db      	ldr	r3, [r3, #28]
200007c6:	687a      	ldr	r2, [r7, #4]
200007c8:	0010      	movs	r0, r2
200007ca:	4798      	blx	r3
		 delay_milli(40); /*25 "bilder/sekund" */
200007cc:	2028      	movs	r0, #40	; 0x28
200007ce:	f7ff fc44 	bl	2000005a <delay_milli>
		 p->move(p);
200007d2:	e7f6      	b.n	200007c2 <main+0x1e>
200007d4:	20000924 	andcs	r0, r0, r4, lsr #18

200007d8 <__udivsi3>:
200007d8:	2200      	movs	r2, #0
200007da:	0843      	lsrs	r3, r0, #1
200007dc:	428b      	cmp	r3, r1
200007de:	d374      	bcc.n	200008ca <__udivsi3+0xf2>
200007e0:	0903      	lsrs	r3, r0, #4
200007e2:	428b      	cmp	r3, r1
200007e4:	d35f      	bcc.n	200008a6 <__udivsi3+0xce>
200007e6:	0a03      	lsrs	r3, r0, #8
200007e8:	428b      	cmp	r3, r1
200007ea:	d344      	bcc.n	20000876 <__udivsi3+0x9e>
200007ec:	0b03      	lsrs	r3, r0, #12
200007ee:	428b      	cmp	r3, r1
200007f0:	d328      	bcc.n	20000844 <__udivsi3+0x6c>
200007f2:	0c03      	lsrs	r3, r0, #16
200007f4:	428b      	cmp	r3, r1
200007f6:	d30d      	bcc.n	20000814 <__udivsi3+0x3c>
200007f8:	22ff      	movs	r2, #255	; 0xff
200007fa:	0209      	lsls	r1, r1, #8
200007fc:	ba12      	rev	r2, r2
200007fe:	0c03      	lsrs	r3, r0, #16
20000800:	428b      	cmp	r3, r1
20000802:	d302      	bcc.n	2000080a <__udivsi3+0x32>
20000804:	1212      	asrs	r2, r2, #8
20000806:	0209      	lsls	r1, r1, #8
20000808:	d065      	beq.n	200008d6 <__udivsi3+0xfe>
2000080a:	0b03      	lsrs	r3, r0, #12
2000080c:	428b      	cmp	r3, r1
2000080e:	d319      	bcc.n	20000844 <__udivsi3+0x6c>
20000810:	e000      	b.n	20000814 <__udivsi3+0x3c>
20000812:	0a09      	lsrs	r1, r1, #8
20000814:	0bc3      	lsrs	r3, r0, #15
20000816:	428b      	cmp	r3, r1
20000818:	d301      	bcc.n	2000081e <__udivsi3+0x46>
2000081a:	03cb      	lsls	r3, r1, #15
2000081c:	1ac0      	subs	r0, r0, r3
2000081e:	4152      	adcs	r2, r2
20000820:	0b83      	lsrs	r3, r0, #14
20000822:	428b      	cmp	r3, r1
20000824:	d301      	bcc.n	2000082a <__udivsi3+0x52>
20000826:	038b      	lsls	r3, r1, #14
20000828:	1ac0      	subs	r0, r0, r3
2000082a:	4152      	adcs	r2, r2
2000082c:	0b43      	lsrs	r3, r0, #13
2000082e:	428b      	cmp	r3, r1
20000830:	d301      	bcc.n	20000836 <__udivsi3+0x5e>
20000832:	034b      	lsls	r3, r1, #13
20000834:	1ac0      	subs	r0, r0, r3
20000836:	4152      	adcs	r2, r2
20000838:	0b03      	lsrs	r3, r0, #12
2000083a:	428b      	cmp	r3, r1
2000083c:	d301      	bcc.n	20000842 <__udivsi3+0x6a>
2000083e:	030b      	lsls	r3, r1, #12
20000840:	1ac0      	subs	r0, r0, r3
20000842:	4152      	adcs	r2, r2
20000844:	0ac3      	lsrs	r3, r0, #11
20000846:	428b      	cmp	r3, r1
20000848:	d301      	bcc.n	2000084e <__udivsi3+0x76>
2000084a:	02cb      	lsls	r3, r1, #11
2000084c:	1ac0      	subs	r0, r0, r3
2000084e:	4152      	adcs	r2, r2
20000850:	0a83      	lsrs	r3, r0, #10
20000852:	428b      	cmp	r3, r1
20000854:	d301      	bcc.n	2000085a <__udivsi3+0x82>
20000856:	028b      	lsls	r3, r1, #10
20000858:	1ac0      	subs	r0, r0, r3
2000085a:	4152      	adcs	r2, r2
2000085c:	0a43      	lsrs	r3, r0, #9
2000085e:	428b      	cmp	r3, r1
20000860:	d301      	bcc.n	20000866 <__udivsi3+0x8e>
20000862:	024b      	lsls	r3, r1, #9
20000864:	1ac0      	subs	r0, r0, r3
20000866:	4152      	adcs	r2, r2
20000868:	0a03      	lsrs	r3, r0, #8
2000086a:	428b      	cmp	r3, r1
2000086c:	d301      	bcc.n	20000872 <__udivsi3+0x9a>
2000086e:	020b      	lsls	r3, r1, #8
20000870:	1ac0      	subs	r0, r0, r3
20000872:	4152      	adcs	r2, r2
20000874:	d2cd      	bcs.n	20000812 <__udivsi3+0x3a>
20000876:	09c3      	lsrs	r3, r0, #7
20000878:	428b      	cmp	r3, r1
2000087a:	d301      	bcc.n	20000880 <__udivsi3+0xa8>
2000087c:	01cb      	lsls	r3, r1, #7
2000087e:	1ac0      	subs	r0, r0, r3
20000880:	4152      	adcs	r2, r2
20000882:	0983      	lsrs	r3, r0, #6
20000884:	428b      	cmp	r3, r1
20000886:	d301      	bcc.n	2000088c <__udivsi3+0xb4>
20000888:	018b      	lsls	r3, r1, #6
2000088a:	1ac0      	subs	r0, r0, r3
2000088c:	4152      	adcs	r2, r2
2000088e:	0943      	lsrs	r3, r0, #5
20000890:	428b      	cmp	r3, r1
20000892:	d301      	bcc.n	20000898 <__udivsi3+0xc0>
20000894:	014b      	lsls	r3, r1, #5
20000896:	1ac0      	subs	r0, r0, r3
20000898:	4152      	adcs	r2, r2
2000089a:	0903      	lsrs	r3, r0, #4
2000089c:	428b      	cmp	r3, r1
2000089e:	d301      	bcc.n	200008a4 <__udivsi3+0xcc>
200008a0:	010b      	lsls	r3, r1, #4
200008a2:	1ac0      	subs	r0, r0, r3
200008a4:	4152      	adcs	r2, r2
200008a6:	08c3      	lsrs	r3, r0, #3
200008a8:	428b      	cmp	r3, r1
200008aa:	d301      	bcc.n	200008b0 <__udivsi3+0xd8>
200008ac:	00cb      	lsls	r3, r1, #3
200008ae:	1ac0      	subs	r0, r0, r3
200008b0:	4152      	adcs	r2, r2
200008b2:	0883      	lsrs	r3, r0, #2
200008b4:	428b      	cmp	r3, r1
200008b6:	d301      	bcc.n	200008bc <__udivsi3+0xe4>
200008b8:	008b      	lsls	r3, r1, #2
200008ba:	1ac0      	subs	r0, r0, r3
200008bc:	4152      	adcs	r2, r2
200008be:	0843      	lsrs	r3, r0, #1
200008c0:	428b      	cmp	r3, r1
200008c2:	d301      	bcc.n	200008c8 <__udivsi3+0xf0>
200008c4:	004b      	lsls	r3, r1, #1
200008c6:	1ac0      	subs	r0, r0, r3
200008c8:	4152      	adcs	r2, r2
200008ca:	1a41      	subs	r1, r0, r1
200008cc:	d200      	bcs.n	200008d0 <__udivsi3+0xf8>
200008ce:	4601      	mov	r1, r0
200008d0:	4152      	adcs	r2, r2
200008d2:	4610      	mov	r0, r2
200008d4:	4770      	bx	lr
200008d6:	e7ff      	b.n	200008d8 <__udivsi3+0x100>
200008d8:	b501      	push	{r0, lr}
200008da:	2000      	movs	r0, #0
200008dc:	f000 f806 	bl	200008ec <__aeabi_idiv0>
200008e0:	bd02      	pop	{r1, pc}
200008e2:	46c0      	nop			; (mov r8, r8)

200008e4 <__aeabi_uidivmod>:
200008e4:	2900      	cmp	r1, #0
200008e6:	d0f7      	beq.n	200008d8 <__udivsi3+0x100>
200008e8:	e776      	b.n	200007d8 <__udivsi3>
200008ea:	4770      	bx	lr

200008ec <__aeabi_idiv0>:
200008ec:	4770      	bx	lr
200008ee:	46c0      	nop			; (mov r8, r8)

200008f0 <ball_geometry>:
200008f0:	0000000c 	andeq	r0, r0, ip
200008f4:	00000004 	andeq	r0, r0, r4
200008f8:	00000004 	andeq	r0, r0, r4
200008fc:	00020001 	andeq	r0, r2, r1
20000900:	01010100 	mrseq	r0, (UNDEF: 17)
20000904:	01030102 	tsteq	r3, r2, lsl #2
20000908:	02010200 	andeq	r0, r1, #0, 4
2000090c:	02030202 	andeq	r0, r3, #536870912	; 0x20000000
20000910:	03020301 	movweq	r0, #8961	; 0x2301
	...

20000924 <ball>:
20000924:	200008f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
	...
20000930:	00000001 	andeq	r0, r0, r1
20000934:	00000001 	andeq	r0, r0, r1
20000938:	20000661 	andcs	r0, r0, r1, ror #12
2000093c:	200006c1 	andcs	r0, r0, r1, asr #13
20000940:	20000721 	andcs	r0, r0, r1, lsr #14
20000944:	20000641 	andcs	r0, r0, r1, asr #12
20000948:	20000514 	andcs	r0, r0, r4, lsl r5
2000094c:	2000051e 	andcs	r0, r0, lr, lsl r5
20000950:	20000528 	andcs	r0, r0, r8, lsr #10
20000954:	20000532 	andcs	r0, r0, r2, lsr r5
20000958:	2000053c 	andcs	r0, r0, ip, lsr r5
2000095c:	20000546 	andcs	r0, r0, r6, asr #10
20000960:	20000550 	andcs	r0, r0, r0, asr r5
20000964:	2000055a 	andcs	r0, r0, sl, asr r5

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000005fb 	strdeq	r0, [r0], -fp
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000158 	andeq	r0, r0, r8, asr r1
  10:	00027a0c 	andeq	r7, r2, ip, lsl #20
  14:	00005800 	andeq	r5, r0, r0, lsl #16
	...
  24:	01380200 	teqeq	r8, r0, lsl #4
  28:	56010000 	strpl	r0, [r1], -r0
  2c:	00003118 	andeq	r3, r0, r8, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	000000a4 	andeq	r0, r0, r4, lsr #1
  38:	00009704 	andeq	r9, r0, r4, lsl #14
  3c:	1c010200 	sfmne	f0, 4, [r1], {-0}
  40:	005f1101 	subseq	r1, pc, r1, lsl #2
  44:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
  48:	011d0100 	tsteq	sp, r0, lsl #2
  4c:	00003111 	andeq	r3, r0, r1, lsl r1
  50:	79050000 	stmdbvc	r5, {}	; <UNPREDICTABLE>
  54:	011e0100 	tsteq	lr, r0, lsl #2
  58:	00003111 	andeq	r3, r0, r1, lsl r1
  5c:	06000100 	streq	r0, [r0], -r0, lsl #2
  60:	0000009e 	muleq	r0, lr, r0
  64:	03011f01 	movweq	r1, #7937	; 0x1f01
  68:	00000038 	andeq	r0, r0, r8, lsr r0
  6c:	00012504 	andeq	r2, r1, r4, lsl #10
  70:	23013400 	movwcs	r3, #5120	; 0x1400
  74:	00b21101 	adcseq	r1, r2, r1, lsl #2
  78:	c5070000 	strgt	r0, [r7, #-0]
  7c:	01000002 	tsteq	r0, r2
  80:	b2070124 	andlt	r0, r7, #36, 2
  84:	00000000 	andeq	r0, r0, r0
  88:	00014007 	andeq	r4, r1, r7
  8c:	01250100 			; <UNDEFINED> instruction: 0x01250100
  90:	0000b207 	andeq	fp, r0, r7, lsl #4
  94:	46070400 	strmi	r0, [r7], -r0, lsl #8
  98:	01000001 	tsteq	r0, r1
  9c:	b2070126 	andlt	r0, r7, #-2147483639	; 0x80000009
  a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  a4:	00787005 	rsbseq	r7, r8, r5
  a8:	09012701 	stmdbeq	r1, {r0, r8, r9, sl, sp}
  ac:	000000b9 	strheq	r0, [r0], -r9
  b0:	0408000c 	streq	r0, [r8], #-12
  b4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
  b8:	005f0900 	subseq	r0, pc, r0, lsl #18
  bc:	00c90000 	sbceq	r0, r9, r0
  c0:	c90a0000 	stmdbgt	sl, {}	; <UNPREDICTABLE>
  c4:	13000000 	movwne	r0, #0
  c8:	07040300 	streq	r0, [r4, -r0, lsl #6]
  cc:	00000118 	andeq	r0, r0, r8, lsl r1
  d0:	00000106 	andeq	r0, r0, r6, lsl #2
  d4:	01280100 			; <UNDEFINED> instruction: 0x01280100
  d8:	00006c04 	andeq	r6, r0, r4, lsl #24
  dc:	00000600 	andeq	r0, r0, r0, lsl #12
  e0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
  e4:	00ea0f01 	rsceq	r0, sl, r1, lsl #30
  e8:	040b0000 	streq	r0, [fp], #-0
  ec:	0000006c 	andeq	r0, r0, ip, rrx
  f0:	0000c60c 	andeq	ip, r0, ip, lsl #12
  f4:	012a0100 			; <UNDEFINED> instruction: 0x012a0100
  f8:	0000d00b 	andeq	sp, r0, fp
  fc:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
 100:	04200008 	strteq	r0, [r0], #-8
 104:	00000020 	andeq	r0, r0, r0, lsr #32
 108:	01360124 	teqeq	r6, r4, lsr #2
 10c:	00019011 	andeq	r9, r1, r1, lsl r0
 110:	65670500 	strbvs	r0, [r7, #-1280]!	; 0xfffffb00
 114:	3701006f 	strcc	r0, [r1, -pc, rrx]
 118:	00dd0d01 	sbcseq	r0, sp, r1, lsl #26
 11c:	07000000 	streq	r0, [r0, -r0]
 120:	0000003c 	andeq	r0, r0, ip, lsr r0
 124:	07013801 	streq	r3, [r1, -r1, lsl #16]
 128:	000000b2 	strheq	r0, [r0], -r2
 12c:	00410704 	subeq	r0, r1, r4, lsl #14
 130:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
 134:	00b20c01 	adcseq	r0, r2, r1, lsl #24
 138:	07080000 	streq	r0, [r8, -r0]
 13c:	000000bc 	strheq	r0, [r0], -ip
 140:	07013901 	streq	r3, [r1, -r1, lsl #18]
 144:	000000b2 	strheq	r0, [r0], -r2
 148:	00c1070c 	sbceq	r0, r1, ip, lsl #14
 14c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
 150:	00b20c01 	adcseq	r0, r2, r1, lsl #24
 154:	07100000 	ldreq	r0, [r0, -r0]
 158:	000001e1 	andeq	r0, r0, r1, ror #3
 15c:	0a013a01 	beq	4e968 <startup-0x1ffb1698>
 160:	000001a1 	andeq	r0, r0, r1, lsr #3
 164:	00fd0714 	rscseq	r0, sp, r4, lsl r7
 168:	3b010000 	blcc	40170 <startup-0x1ffbfe90>
 16c:	01a10a01 			; <UNDEFINED> instruction: 0x01a10a01
 170:	07180000 	ldreq	r0, [r8, -r0]
 174:	00000025 	andeq	r0, r0, r5, lsr #32
 178:	0a013c01 	beq	4f184 <startup-0x1ffb0e7c>
 17c:	000001a1 	andeq	r0, r0, r1, lsr #3
 180:	00b2071c 	adcseq	r0, r2, ip, lsl r7
 184:	3d010000 	stccc	0, cr0, [r1, #-0]
 188:	01bc0a01 			; <UNDEFINED> instruction: 0x01bc0a01
 18c:	00200000 	eoreq	r0, r0, r0
 190:	00019b0d 	andeq	r9, r1, sp, lsl #22
 194:	019b0e00 	orrseq	r0, fp, r0, lsl #28
 198:	0b000000 	bleq	1a0 <startup-0x1ffffe60>
 19c:	00010304 	andeq	r0, r1, r4, lsl #6
 1a0:	90040b00 	andls	r0, r4, r0, lsl #22
 1a4:	0d000001 	stceq	0, cr0, [r0, #-4]
 1a8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 1ac:	00019b0e 	andeq	r9, r1, lr, lsl #22
 1b0:	00b20e00 	adcseq	r0, r2, r0, lsl #28
 1b4:	b20e0000 	andlt	r0, lr, #0
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	01a7040b 			; <UNDEFINED> instruction: 0x01a7040b
 1c0:	ea060000 	b	1801c8 <startup-0x1fe7fe38>
 1c4:	01000002 	tsteq	r0, r2
 1c8:	0304013e 	movweq	r0, #16702	; 0x413e
 1cc:	06000001 	streq	r0, [r0], -r1
 1d0:	000002e9 	andeq	r0, r0, r9, ror #5
 1d4:	0d013e01 	stceq	14, cr3, [r1, #-4]
 1d8:	0000019b 	muleq	r0, fp, r1
 1dc:	0001dc0f 	andeq	sp, r1, pc, lsl #24
 1e0:	01610100 	cmneq	r1, r0, lsl #2
 1e4:	0001c210 	andeq	ip, r1, r0, lsl r2
 1e8:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
 1ec:	10200009 	eorne	r0, r0, r9
 1f0:	000000e7 	andeq	r0, r0, r7, ror #1
 1f4:	06016c01 	streq	r6, [r1], -r1, lsl #24
 1f8:	200007a4 	andcs	r0, r0, r4, lsr #15
 1fc:	00000034 	andeq	r0, r0, r4, lsr r0
 200:	02159c01 	andseq	r9, r5, #256	; 0x100
 204:	70110000 	andsvc	r0, r1, r0
 208:	016e0100 	cmneq	lr, r0, lsl #2
 20c:	0001cf0b 	andeq	ip, r1, fp, lsl #30
 210:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 214:	02cf1000 	sbceq	r1, pc, #0
 218:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
 21c:	07200701 	streq	r0, [r0, -r1, lsl #14]!
 220:	00842000 	addeq	r2, r4, r0
 224:	9c010000 	stcls	0, cr0, [r1], {-0}
 228:	0000023b 	andeq	r0, r0, fp, lsr r2
 22c:	01006f12 	tsteq	r0, r2, lsl pc
 230:	cf1b014e 	svcgt	0x001b014e
 234:	02000001 	andeq	r0, r0, #1
 238:	10007491 	mulne	r0, r1, r4
 23c:	0000024f 	andeq	r0, r0, pc, asr #4
 240:	07014901 	streq	r4, [r1, -r1, lsl #18]
 244:	200006c0 	andcs	r0, r0, r0, asr #13
 248:	00000060 	andeq	r0, r0, r0, rrx
 24c:	02799c01 	rsbseq	r9, r9, #256	; 0x100
 250:	6f120000 	svcvs	0x00120000
 254:	01490100 	mrseq	r0, (UNDEF: 89)
 258:	0001cf1c 	andeq	ip, r1, ip, lsl pc
 25c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 260:	0006c813 	andeq	ip, r6, r3, lsl r8
 264:	00004e20 	andeq	r4, r0, r0, lsr #28
 268:	00691100 	rsbeq	r1, r9, r0, lsl #2
 26c:	0b014a01 	bleq	52a78 <startup-0x1ffad588>
 270:	000000b2 	strheq	r0, [r0], -r2
 274:	00749102 	rsbseq	r9, r4, r2, lsl #2
 278:	02ac1000 	adceq	r1, ip, #0
 27c:	44010000 	strmi	r0, [r1], #-0
 280:	06600701 	strbteq	r0, [r0], -r1, lsl #14
 284:	00602000 	rsbeq	r2, r0, r0
 288:	9c010000 	stcls	0, cr0, [r1], {-0}
 28c:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
 290:	01006f12 	tsteq	r0, r2, lsl pc
 294:	cf1b0144 	svcgt	0x001b0144
 298:	02000001 	andeq	r0, r0, #1
 29c:	68136c91 	ldmdavs	r3, {r0, r4, r7, sl, fp, sp, lr}
 2a0:	4e200006 	cdpmi	0, 2, cr0, cr0, cr6, {0}
 2a4:	11000000 	mrsne	r0, (UNDEF: 0)
 2a8:	45010069 	strmi	r0, [r1, #-105]	; 0xffffff97
 2ac:	00b20b01 	adcseq	r0, r2, r1, lsl #22
 2b0:	91020000 	mrsls	r0, (UNDEF: 2)
 2b4:	14000074 	strne	r0, [r0], #-116	; 0xffffff8c
 2b8:	00000216 	andeq	r0, r0, r6, lsl r2
 2bc:	07014001 	streq	r4, [r1, -r1]
 2c0:	20000640 	andcs	r0, r0, r0, asr #12
 2c4:	00000020 	andeq	r0, r0, r0, lsr #32
 2c8:	02fd9c01 	rscseq	r9, sp, #256	; 0x100
 2cc:	6f120000 	svcvs	0x00120000
 2d0:	01400100 	mrseq	r0, (UNDEF: 80)
 2d4:	0001cf20 	andeq	ip, r1, r0, lsr #30
 2d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2dc:	0002db15 	andeq	sp, r2, r5, lsl fp
 2e0:	01400100 	mrseq	r0, (UNDEF: 80)
 2e4:	0000b227 	andeq	fp, r0, r7, lsr #4
 2e8:	70910200 	addsvc	r0, r1, r0, lsl #4
 2ec:	0002e215 	andeq	lr, r2, r5, lsl r2
 2f0:	01400100 	mrseq	r0, (UNDEF: 80)
 2f4:	0000b233 	andeq	fp, r0, r3, lsr r2
 2f8:	6c910200 	lfmvs	f0, 4, [r1], {0}
 2fc:	00851600 	addeq	r1, r5, r0, lsl #12
 300:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
 304:	0004ca07 	andeq	ip, r4, r7, lsl #20
 308:	00017620 	andeq	r7, r1, r0, lsr #12
 30c:	799c0100 	ldmibvc	ip, {r8}
 310:	17000003 	strne	r0, [r0, -r3]
 314:	f6010078 			; <UNDEFINED> instruction: 0xf6010078
 318:	0000c916 	andeq	ip, r0, r6, lsl r9
 31c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 320:	01007917 	tsteq	r0, r7, lsl r9
 324:	00c922f6 	strdeq	r2, [r9], #38	; 0x26
 328:	91020000 	mrsls	r0, (UNDEF: 2)
 32c:	65731750 	ldrbvs	r1, [r3, #-1872]!	; 0xfffff8b0
 330:	f6010074 			; <UNDEFINED> instruction: 0xf6010074
 334:	0000c92e 	andeq	ip, r0, lr, lsr #18
 338:	4c910200 	lfmmi	f0, 4, [r1], {0}
 33c:	0001e618 	andeq	lr, r1, r8, lsl r6
 340:	0bf70100 	bleq	ffdc0748 <ball+0xdfdbfe24>
 344:	00000025 	andeq	r0, r0, r5, lsr #32
 348:	18679102 	stmdane	r7!, {r1, r8, ip, pc}^
 34c:	000000e2 	andeq	r0, r0, r2, ror #1
 350:	2511f701 	ldrcs	pc, [r1, #-1793]	; 0xfffff8ff
 354:	02000000 	andeq	r0, r0, #0
 358:	31185f91 			; <UNDEFINED> instruction: 0x31185f91
 35c:	01000000 	mrseq	r0, (UNDEF: 0)
 360:	002517f7 	strdeq	r1, [r5], -r7	; <UNPREDICTABLE>
 364:	91020000 	mrsls	r0, (UNDEF: 2)
 368:	01eb1866 	mvneq	r1, r6, ror #16
 36c:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
 370:	0000b207 	andeq	fp, r0, r7, lsl #4
 374:	60910200 	addsvs	r0, r1, r0, lsl #4
 378:	023a1600 	eorseq	r1, sl, #0, 12
 37c:	ea010000 	b	40384 <startup-0x1ffbfc7c>
 380:	00046207 	andeq	r6, r4, r7, lsl #4
 384:	00006820 	andeq	r6, r0, r0, lsr #16
 388:	ae9c0100 	fmlgee	f0, f4, f0
 38c:	18000003 	stmdane	r0, {r0, r1}
 390:	00000080 	andeq	r0, r0, r0, lsl #1
 394:	250beb01 	strcs	lr, [fp, #-2817]	; 0xfffff4ff
 398:	02000000 	andeq	r0, r0, #0
 39c:	61197791 			; <UNDEFINED> instruction: 0x61197791
 3a0:	01006464 	tsteq	r0, r4, ror #8
 3a4:	002511eb 	eoreq	r1, r5, fp, ror #3
 3a8:	91020000 	mrsls	r0, (UNDEF: 2)
 3ac:	5c1a0076 	ldcpl	0, cr0, [sl], {118}	; 0x76
 3b0:	01000002 	tsteq	r0, r2
 3b4:	03f407d8 	mvnseq	r0, #216, 14	; 0x3600000
 3b8:	006e2000 	rsbeq	r2, lr, r0
 3bc:	9c010000 	stcls	0, cr0, [r1], {-0}
 3c0:	00012f1b 	andeq	r2, r1, fp, lsl pc
 3c4:	07d40100 	ldrbeq	r0, [r4, r0, lsl #2]
 3c8:	200003da 	ldrdcs	r0, [r0], -sl
 3cc:	0000001a 	andeq	r0, r0, sl, lsl r0
 3d0:	461c9c01 	ldrmi	r9, [ip], -r1, lsl #24
 3d4:	01000000 	mrseq	r0, (UNDEF: 0)
 3d8:	003110cd 	eorseq	r1, r1, sp, asr #1
 3dc:	03b00000 	movseq	r0, #0
 3e0:	002a2000 	eoreq	r2, sl, r0
 3e4:	9c010000 	stcls	0, cr0, [r1], {-0}
 3e8:	000003fc 	strdeq	r0, [r0], -ip
 3ec:	0000311d 	andeq	r3, r0, sp, lsl r1
 3f0:	30cd0100 	sbccc	r0, sp, r0, lsl #2
 3f4:	00000031 	andeq	r0, r0, r1, lsr r0
 3f8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 3fc:	00020316 	andeq	r0, r2, r6, lsl r3
 400:	07c50100 	strbeq	r0, [r5, r0, lsl #2]
 404:	2000036a 	andcs	r0, r0, sl, ror #6
 408:	00000046 	andeq	r0, r0, r6, asr #32
 40c:	04319c01 	ldrteq	r9, [r1], #-3073	; 0xfffff3ff
 410:	531d0000 	tstpl	sp, #0
 414:	01000000 	mrseq	r0, (UNDEF: 0)
 418:	002522c5 	eoreq	r2, r5, r5, asr #5
 41c:	91020000 	mrsls	r0, (UNDEF: 2)
 420:	00311d77 	eorseq	r1, r1, r7, ror sp
 424:	c5010000 	strgt	r0, [r1, #-0]
 428:	00002530 	andeq	r2, r0, r0, lsr r5
 42c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 430:	000a1600 	andeq	r1, sl, r0, lsl #12
 434:	bd010000 	stclt	0, cr0, [r1, #-0]
 438:	00032407 	andeq	r2, r3, r7, lsl #8
 43c:	00004620 	andeq	r4, r0, r0, lsr #12
 440:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
 444:	1d000004 	stcne	0, cr0, [r0, #-16]
 448:	00000018 	andeq	r0, r0, r8, lsl r0
 44c:	2525bd01 	strcs	fp, [r5, #-3329]!	; 0xfffff2ff
 450:	02000000 	andeq	r0, r0, #0
 454:	311d7791 			; <UNDEFINED> instruction: 0x311d7791
 458:	01000000 	mrseq	r0, (UNDEF: 0)
 45c:	002536bd 	strhteq	r3, [r5], -sp
 460:	91020000 	mrsls	r0, (UNDEF: 2)
 464:	d4160076 	ldrle	r0, [r6], #-118	; 0xffffff8a
 468:	01000000 	mrseq	r0, (UNDEF: 0)
 46c:	02a007a8 	adceq	r0, r0, #168, 14	; 0x2a00000
 470:	00842000 	addeq	r2, r4, r0
 474:	9c010000 	stcls	0, cr0, [r1], {-0}
 478:	0000049b 	muleq	r0, fp, r4
 47c:	0001f11d 	andeq	pc, r1, sp, lsl r1	; <UNPREDICTABLE>
 480:	1da80100 	stfnes	f0, [r8]
 484:	00000025 	andeq	r0, r0, r5, lsr #32
 488:	1d779102 	ldfnep	f1, [r7, #-8]!
 48c:	00000031 	andeq	r0, r0, r1, lsr r0
 490:	252ca801 	strcs	sl, [ip, #-2049]!	; 0xfffff7ff
 494:	02000000 	andeq	r0, r0, #0
 498:	1c007691 	stcne	6, cr7, [r0], {145}	; 0x91
 49c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 4a0:	250a9001 	strcs	r9, [sl, #-1]
 4a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 4a8:	98200002 	stmdals	r0!, {r1}
 4ac:	01000000 	mrseq	r0, (UNDEF: 0)
 4b0:	0004d29c 	muleq	r4, ip, r2
 4b4:	00311d00 	eorseq	r1, r1, r0, lsl #26
 4b8:	90010000 	andls	r0, r1, r0
 4bc:	0000251f 	andeq	r2, r0, pc, lsl r5
 4c0:	6f910200 	svcvs	0x00910200
 4c4:	01006319 	tsteq	r0, r9, lsl r3
 4c8:	00250b91 	mlaeq	r5, r1, fp, r0
 4cc:	91020000 	mrsls	r0, (UNDEF: 2)
 4d0:	27160077 			; <UNDEFINED> instruction: 0x27160077
 4d4:	01000002 	tsteq	r0, r2
 4d8:	0198077a 	orrseq	r0, r8, sl, ror r7
 4dc:	00702000 	rsbseq	r2, r0, r0
 4e0:	9c010000 	stcls	0, cr0, [r1], {-0}
 4e4:	000004f6 	strdeq	r0, [r0], -r6
 4e8:	01006319 	tsteq	r0, r9, lsl r3
 4ec:	00250b7b 	eoreq	r0, r5, fp, ror fp
 4f0:	91020000 	mrsls	r0, (UNDEF: 2)
 4f4:	2a1e0077 	bcs	7806d8 <startup-0x1f87f928>
 4f8:	01000000 	mrseq	r0, (UNDEF: 0)
 4fc:	01380e67 	teqeq	r8, r7, ror #28
 500:	00602000 	rsbeq	r2, r0, r0
 504:	9c010000 	stcls	0, cr0, [r1], {-0}
 508:	0000051c 	andeq	r0, r0, ip, lsl r5
 50c:	0000311d 	andeq	r3, r0, sp, lsl r1
 510:	28670100 	stmdacs	r7!, {r8}^
 514:	00000025 	andeq	r0, r0, r5, lsr #32
 518:	00779102 	rsbseq	r9, r7, r2, lsl #2
 51c:	0000ec1f 	andeq	lr, r0, pc, lsl ip
 520:	075f0100 	ldrbeq	r0, [pc, -r0, lsl #2]
 524:	200000e8 	andcs	r0, r0, r8, ror #1
 528:	00000050 	andeq	r0, r0, r0, asr r0
 52c:	054d9c01 	strbeq	r9, [sp, #-3073]	; 0xfffff3ff
 530:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
 534:	265f0100 	ldrbcs	r0, [pc], -r0, lsl #2
 538:	00000025 	andeq	r0, r0, r5, lsr #32
 53c:	196f9102 	stmdbne	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 540:	60010063 	andvs	r0, r1, r3, rrx
 544:	0000250b 	andeq	r2, r0, fp, lsl #10
 548:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 54c:	01031f00 	tsteq	r3, r0, lsl #30
 550:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 554:	00009807 	andeq	r9, r0, r7, lsl #16
 558:	00005020 	andeq	r5, r0, r0, lsr #32
 55c:	7e9c0100 	fmlvce	f0, f4, f0
 560:	17000005 	strne	r0, [r0, -r5]
 564:	58010078 	stmdapl	r1, {r3, r4, r5, r6}
 568:	00002524 	andeq	r2, r0, r4, lsr #10
 56c:	6f910200 	svcvs	0x00910200
 570:	01006319 	tsteq	r0, r9, lsl r3
 574:	00250b59 	eoreq	r0, r5, r9, asr fp
 578:	91020000 	mrsls	r0, (UNDEF: 2)
 57c:	f7160077 			; <UNDEFINED> instruction: 0xf7160077
 580:	01000001 	tsteq	r0, r1
 584:	005a0631 	subseq	r0, sl, r1, lsr r6
 588:	003e2000 	eorseq	r2, lr, r0
 58c:	9c010000 	stcls	0, cr0, [r1], {-0}
 590:	000005a3 	andeq	r0, r0, r3, lsr #11
 594:	00736d17 	rsbseq	r6, r3, r7, lsl sp
 598:	c91f3101 	ldmdbgt	pc, {r0, r8, ip, sp}	; <UNPREDICTABLE>
 59c:	02000000 	andeq	r0, r0, #0
 5a0:	16007491 			; <UNDEFINED> instruction: 0x16007491
 5a4:	0000008b 	andeq	r0, r0, fp, lsl #1
 5a8:	2c062701 	stccs	7, cr2, [r6], {1}
 5ac:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 5b0:	01000000 	mrseq	r0, (UNDEF: 0)
 5b4:	0005c89c 	muleq	r5, ip, r8
 5b8:	73751700 	cmnvc	r5, #0, 14
 5bc:	1f270100 	svcne	0x00270100
 5c0:	000000c9 	andeq	r0, r0, r9, asr #1
 5c4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 5c8:	00026e1a 	andeq	r6, r2, sl, lsl lr
 5cc:	06220100 	strteq	r0, [r2], -r0, lsl #2
 5d0:	2000001a 	andcs	r0, r0, sl, lsl r0
 5d4:	00000012 	andeq	r0, r0, r2, lsl r0
 5d8:	4c209c01 	stcmi	12, cr9, [r0], #-4
 5dc:	01000001 	tsteq	r0, r1
 5e0:	00100617 	andseq	r0, r0, r7, lsl r6
 5e4:	000a2000 	andeq	r2, sl, r0
 5e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 5ec:	0001d420 	andeq	sp, r1, r0, lsr #8
 5f0:	06090100 	streq	r0, [r9], -r0, lsl #2
 5f4:	20000000 	andcs	r0, r0, r0
 5f8:	0000000c 	andeq	r0, r0, ip
 5fc:	Address 0x000005fc is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	0d070000 	stceq	0, cr0, [r7, #-0]
  60:	3a0e0300 	bcc	380c68 <startup-0x1fc7f398>
  64:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  68:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  6c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  70:	0b0b0024 	bleq	2c0108 <startup-0x1fd3fef8>
  74:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  78:	01090000 	mrseq	r0, (UNDEF: 9)
  7c:	01134901 	tsteq	r3, r1, lsl #18
  80:	0a000013 	beq	d4 <startup-0x1fffff2c>
  84:	13490021 	movtne	r0, #36897	; 0x9021
  88:	00000b2f 	andeq	r0, r0, pc, lsr #22
  8c:	0b000f0b 	bleq	3cc0 <startup-0x1fffc340>
  90:	0013490b 	andseq	r4, r3, fp, lsl #18
  94:	00340c00 	eorseq	r0, r4, r0, lsl #24
  98:	0b3a0e03 	bleq	e838ac <startup-0x1f17c754>
  9c:	0b39053b 	bleq	e41590 <startup-0x1f1bea70>
  a0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  a4:	00001802 	andeq	r1, r0, r2, lsl #16
  a8:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
  ac:	00130119 	andseq	r0, r3, r9, lsl r1
  b0:	00050e00 	andeq	r0, r5, r0, lsl #28
  b4:	00001349 	andeq	r1, r0, r9, asr #6
  b8:	0300340f 	movweq	r3, #1039	; 0x40f
  bc:	3b0b3a0e 	blcc	2ce8fc <startup-0x1fd31704>
  c0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  c4:	00180213 	andseq	r0, r8, r3, lsl r2
  c8:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
  cc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  dc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  e0:	00130119 	andseq	r0, r3, r9, lsl r1
  e4:	00341100 	eorseq	r1, r4, r0, lsl #2
  e8:	0b3a0803 	bleq	e820fc <startup-0x1f17df04>
  ec:	0b39053b 	bleq	e415e0 <startup-0x1f1bea20>
  f0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  f4:	05120000 	ldreq	r0, [r2, #-0]
  f8:	3a080300 	bcc	200d00 <startup-0x1fdff300>
  fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 100:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 104:	13000018 	movwne	r0, #24
 108:	0111010b 	tsteq	r1, fp, lsl #2
 10c:	00000612 	andeq	r0, r0, r2, lsl r6
 110:	3f012e14 	svccc	0x00012e14
 114:	3a0e0319 	bcc	380d80 <startup-0x1fc7f280>
 118:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 11c:	1119270b 	tstne	r9, fp, lsl #14
 120:	40061201 	andmi	r1, r6, r1, lsl #4
 124:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 128:	00001301 	andeq	r1, r0, r1, lsl #6
 12c:	03000515 	movweq	r0, #1301	; 0x515
 130:	3b0b3a0e 	blcc	2ce970 <startup-0x1fd31690>
 134:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 138:	00180213 	andseq	r0, r8, r3, lsl r2
 13c:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 140:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 14c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 150:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 154:	00130119 	andseq	r0, r3, r9, lsl r1
 158:	00051700 	andeq	r1, r5, r0, lsl #14
 15c:	0b3a0803 	bleq	e82170 <startup-0x1f17de90>
 160:	0b390b3b 	bleq	e42e54 <startup-0x1f1bd1ac>
 164:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 168:	34180000 	ldrcc	r0, [r8], #-0
 16c:	3a0e0300 	bcc	380d74 <startup-0x1fc7f28c>
 170:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 174:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 178:	19000018 	stmdbne	r0, {r3, r4}
 17c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 180:	0b3b0b3a 	bleq	ec2e70 <startup-0x1f13d190>
 184:	13490b39 	movtne	r0, #39737	; 0x9b39
 188:	00001802 	andeq	r1, r0, r2, lsl #16
 18c:	3f002e1a 	svccc	0x00002e1a
 190:	3a0e0319 	bcc	380dfc <startup-0x1fc7f204>
 194:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 198:	1119270b 	tstne	r9, fp, lsl #14
 19c:	40061201 	andmi	r1, r6, r1, lsl #4
 1a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1a4:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 1a8:	03193f00 	tsteq	r9, #0, 30
 1ac:	3b0b3a0e 	blcc	2ce9ec <startup-0x1fd31614>
 1b0:	110b390b 	tstne	fp, fp, lsl #18
 1b4:	40061201 	andmi	r1, r6, r1, lsl #4
 1b8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1bc:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 1c0:	03193f01 	tsteq	r9, #1, 30
 1c4:	3b0b3a0e 	blcc	2cea04 <startup-0x1fd315fc>
 1c8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1cc:	11134919 	tstne	r3, r9, lsl r9
 1d0:	40061201 	andmi	r1, r6, r1, lsl #4
 1d4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1d8:	00001301 	andeq	r1, r0, r1, lsl #6
 1dc:	0300051d 	movweq	r0, #1309	; 0x51d
 1e0:	3b0b3a0e 	blcc	2cea20 <startup-0x1fd315e0>
 1e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1e8:	00180213 	andseq	r0, r8, r3, lsl r2
 1ec:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
 1f0:	0b3a0e03 	bleq	e83a04 <startup-0x1f17c5fc>
 1f4:	0b390b3b 	bleq	e42ee8 <startup-0x1f1bd118>
 1f8:	01111927 	tsteq	r1, r7, lsr #18
 1fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 200:	01194296 			; <UNDEFINED> instruction: 0x01194296
 204:	1f000013 	svcne	0x00000013
 208:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 20c:	0b3a0e03 	bleq	e83a20 <startup-0x1f17c5e0>
 210:	0b390b3b 	bleq	e42f04 <startup-0x1f1bd0fc>
 214:	01111927 	tsteq	r1, r7, lsr #18
 218:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 21c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 220:	20000013 	andcs	r0, r0, r3, lsl r0
 224:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 228:	0b3a0e03 	bleq	e83a3c <startup-0x1f17c5c4>
 22c:	0b390b3b 	bleq	e42f20 <startup-0x1f1bd0e0>
 230:	01111927 	tsteq	r1, r7, lsr #18
 234:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 238:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000007c8 	andeq	r0, r0, r8, asr #15
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200007d8 	ldrdcs	r0, [r0], -r8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   4:	00480003 	subeq	r0, r8, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	616b734f 	cmnvs	fp, pc, asr #6
  28:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
  2c:	6f746b73 	svcvs	0x00746b73
  30:	4f4d2f70 	svcmi	0x004d2f70
  34:	4f4d2f50 	svcmi	0x004d2f50
  38:	75612f50 	strbvc	r2, [r1, #-3920]!	; 0xfffff0b0
  3c:	6f706f74 	svcvs	0x00706f74
  40:	0000676e 	andeq	r6, r0, lr, ror #14
  44:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  48:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  4c:	00010063 	andeq	r0, r1, r3, rrx
  50:	01050000 	mrseq	r0, (UNDEF: 5)
  54:	00020500 	andeq	r0, r2, r0, lsl #10
  58:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  5c:	21130109 	tstcs	r3, r9, lsl #2
  60:	02212f21 	eoreq	r2, r1, #33, 30	; 0x84
  64:	01010003 	tsteq	r1, r3
  68:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
  6c:	00001002 	andeq	r1, r0, r2
  70:	01160320 	tsteq	r6, r0, lsr #6
  74:	05300305 	ldreq	r0, [r0, #-773]!	; 0xfffffcfb
  78:	17052801 	strne	r2, [r5, -r1, lsl #16]
  7c:	2f02052f 	svccs	0x0002052f
  80:	2f01052f 	svccs	0x0001052f
  84:	053e2205 	ldreq	r2, [lr, #-517]!	; 0xfffffdfb
  88:	03054b07 	movweq	r4, #23303	; 0x5b07
  8c:	2f2f2f21 	svccs	0x002f2f21
  90:	052a0a05 	streq	r0, [sl, #-2565]!	; 0xfffff5fb
  94:	01053c07 	tsteq	r5, r7, lsl #24
  98:	5a220535 	bpl	881574 <startup-0x1f77ea8c>
  9c:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
  a0:	07058305 	streq	r8, [r5, -r5, lsl #6]
  a4:	2103053e 	tstcs	r3, lr, lsr r5
  a8:	05570a05 	ldrbeq	r0, [r7, #-2565]	; 0xfffff5fb
  ac:	01053c07 	tsteq	r5, r7, lsl #24
  b0:	03260531 			; <UNDEFINED> instruction: 0x03260531
  b4:	0705581f 	smladeq	r5, pc, r8, r5	; <UNPREDICTABLE>
  b8:	20050568 	andcs	r0, r5, r8, ror #10
  bc:	6713054b 	ldrvs	r0, [r3, -fp, asr #10]
  c0:	05660505 	strbeq	r0, [r6, #-1285]!	; 0xfffffafb
  c4:	13057503 	movwne	r7, #21763	; 0x5503
  c8:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
  cc:	05672805 	strbeq	r2, [r7, #-2053]!	; 0xfffff7fb
  d0:	05056807 	streq	r6, [r5, #-2055]	; 0xfffff7f9
  d4:	05674b20 	strbeq	r4, [r7, #-2848]!	; 0xfffff4e0
  d8:	1305bb03 	movwne	fp, #23299	; 0x5b03
  dc:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
  e0:	05763305 	ldrbeq	r3, [r6, #-773]!	; 0xfffffcfb
  e4:	02056703 	andeq	r6, r5, #786432	; 0xc0000
  e8:	05ba1103 	ldreq	r1, [sl, #259]!	; 0x103
  ec:	20710305 	rsbscs	r0, r1, r5, lsl #6
  f0:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
  f4:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
  f8:	02053d3d 	andeq	r3, r5, #3904	; 0xf40
  fc:	4b1f0522 	blmi	7c158c <startup-0x1f83ea74>
 100:	3d3e0305 	ldccc	3, cr0, [lr, #-20]!	; 0xffffffec
 104:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 108:	3d3d2f03 	ldccc	15, cr2, [sp, #-12]!
 10c:	3d310405 	cfldrscc	mvf0, [r1, #-20]!	; 0xffffffec
 110:	052f1905 	streq	r1, [pc, #-2309]!	; fffff813 <ball+0xdfffeeef>
 114:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
 118:	06053d4b 	streq	r3, [r5], -fp, asr #26
 11c:	4504052f 	strmi	r0, [r4, #-1327]	; 0xfffffad1
 120:	24030526 	strcs	r0, [r3], #-1318	; 0xfffffada
 124:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 128:	2a052f03 	bcs	14bd3c <startup-0x1feb42c4>
 12c:	680305ca 	stmdavs	r3, {r1, r3, r6, r7, r8, sl}
 130:	2011053d 	andscs	r0, r1, sp, lsr r5
 134:	3d2f0305 	stccc	3, cr0, [pc, #-20]!	; 128 <startup-0x1ffffed8>
 138:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 13c:	052f0705 	streq	r0, [pc, #-1797]!	; fffffa3f <ball+0xdffff11b>
 140:	03052005 	movweq	r2, #20485	; 0x5005
 144:	11053d4b 	tstne	r5, fp, asr #26
 148:	05052f20 	streq	r2, [r5, #-3872]	; 0xfffff0e0
 14c:	2104054a 	tstcs	r4, sl, asr #10
 150:	3011053d 	andscc	r0, r1, sp, lsr r5
 154:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 158:	053d2104 	ldreq	r2, [sp, #-260]!	; 0xfffffefc
 15c:	0205300a 	andeq	r3, r5, #10
 160:	bc37053d 	cfldr32lt	mvfx0, [r7], #-244	; 0xffffff0c
 164:	05910305 	ldreq	r0, [r1, #773]	; 0x305
 168:	03052014 	movweq	r2, #20500	; 0x5014
 16c:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 170:	3e11052f 	cfmul64cc	mvdx0, mvdx1, mvdx15
 174:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 178:	053d2104 	ldreq	r2, [sp, #-260]!	; 0xfffffefc
 17c:	05053011 	streq	r3, [r5, #-17]	; 0xffffffef
 180:	2104054a 	tstcs	r4, sl, asr #10
 184:	3015053d 	andscc	r0, r5, sp, lsr r5
 188:	3d590305 	ldclcc	3, cr0, [r9, #-20]	; 0xffffffec
 18c:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 190:	03057641 	movweq	r7, #22081	; 0x5641
 194:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 198:	8302053d 	movwhi	r0, #9533	; 0x253d
 19c:	054c3b05 	strbeq	r3, [ip, #-2821]	; 0xfffff4fb
 1a0:	593d9103 	ldmdbpl	sp!, {r0, r1, r8, ip, pc}
 1a4:	02053d3d 	andeq	r3, r5, #3904	; 0xf40
 1a8:	4c3b0583 	cfldr32mi	mvfx0, [fp], #-524	; 0xfffffdf4
 1ac:	59670a05 	stmdbpl	r7!, {r0, r2, r9, fp}^
 1b0:	05670205 	strbeq	r0, [r7, #-517]!	; 0xfffffdfb
 1b4:	03054e11 	movweq	r4, #24081	; 0x5e11
 1b8:	2013052f 	andscs	r0, r3, pc, lsr #10
 1bc:	052f0205 	streq	r0, [pc, #-517]!	; ffffffbf <ball+0xdffff69b>
 1c0:	0205841e 	andeq	r8, r5, #503316480	; 0x1e000000
 1c4:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 1c8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 1cc:	4b4b3d3d 	blmi	12cf6c8 <startup-0x1ed30938>
 1d0:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 1d4:	053e2105 	ldreq	r2, [lr, #-261]!	; 0xfffffefb
 1d8:	03053f0c 	movweq	r3, #24332	; 0x5f0c
 1dc:	2104053c 	tstcs	r4, ip, lsr r5
 1e0:	4b0c059f 	blmi	301864 <startup-0x1fcfe79c>
 1e4:	053c0405 	ldreq	r0, [ip, #-1029]!	; 0xfffffbfb
 1e8:	04020005 	streq	r0, [r2], #-5
 1ec:	1c052103 	stfnes	f2, [r5], {3}
 1f0:	03040200 	movweq	r0, #16896	; 0x4200
 1f4:	00040549 	andeq	r0, r4, r9, asr #10
 1f8:	58010402 	stmdapl	r1, {r1, sl}
 1fc:	02001c05 	andeq	r1, r0, #1280	; 0x500
 200:	05470204 	strbeq	r0, [r7, #-516]	; 0xfffffdfc
 204:	04020003 	streq	r0, [r2], #-3
 208:	02055801 	andeq	r5, r5, #65536	; 0x10000
 20c:	5a320551 	bpl	c81758 <startup-0x1f37e8a8>
 210:	05681205 	strbeq	r1, [r8, #-517]!	; 0xfffffdfb
 214:	07052e15 	smladeq	r5, r5, lr, r2
 218:	22050520 	andcs	r0, r5, #32, 10	; 0x8000000
 21c:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
 220:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
 224:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 228:	26054a04 	strcs	r4, [r5], -r4, lsl #20
 22c:	06040200 	streq	r0, [r4], -r0, lsl #4
 230:	4c0c054a 	cfstr32mi	mvfx0, [ip], {74}	; 0x4a
 234:	912e0f05 			; <UNDEFINED> instruction: 0x912e0f05
 238:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 23c:	0305210f 	movweq	r2, #20751	; 0x510f
 240:	210f054a 	tstcs	pc, sl, asr #10
 244:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 248:	0305210f 	movweq	r2, #20751	; 0x510f
 24c:	210f054a 	tstcs	pc, sl, asr #10
 250:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 254:	0305210f 	movweq	r2, #20751	; 0x510f
 258:	210f054a 	tstcs	pc, sl, asr #10
 25c:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 260:	0305210f 	movweq	r2, #20751	; 0x510f
 264:	2205054a 	andcs	r0, r5, #310378496	; 0x12800000
 268:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 26c:	0f056805 	svceq	0x00056805
 270:	4b06053d 	blmi	18176c <startup-0x1fe7e894>
 274:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
 278:	03054b06 	movweq	r4, #23302	; 0x5b06
 27c:	bb26053e 	bllt	98177c <startup-0x1f67e884>
 280:	05660305 	strbeq	r0, [r6, #-773]!	; 0xfffffcfb
 284:	0305750a 	movweq	r7, #21770	; 0x550a
 288:	ad050591 	cfstr32ge	mvfx0, [r5, #-580]	; 0xfffffdbc
 28c:	923d0905 	eorsls	r0, sp, #81920	; 0x14000
 290:	05920305 	ldreq	r0, [r2, #773]	; 0x305
 294:	ac610333 	stclge	3, cr0, [r1], #-204	; 0xffffff34
 298:	20030205 	andcs	r0, r3, r5, lsl #4
 29c:	033a0520 	teqeq	sl, #32, 10	; 0x8000000
 2a0:	0b055826 	bleq	156340 <startup-0x1fea9cc0>
 2a4:	02053d67 	andeq	r3, r5, #6592	; 0x19c0
 2a8:	4b1d053d 	blmi	7417a4 <startup-0x1f8be85c>
 2ac:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
 2b0:	0b052e03 	bleq	14bac4 <startup-0x1feb453c>
 2b4:	03040200 	movweq	r0, #16896	; 0x4200
 2b8:	00150521 	andseq	r0, r5, r1, lsr #10
 2bc:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 2c0:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
 2c4:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 2c8:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
 2cc:	04056603 	streq	r6, [r5], #-1539	; 0xfffff9fd
 2d0:	03040200 	movweq	r0, #16896	; 0x4200
 2d4:	00260520 	eoreq	r0, r6, r0, lsr #10
 2d8:	20030402 	andcs	r0, r3, r2, lsl #8
 2dc:	02003005 	andeq	r3, r0, #5
 2e0:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 2e4:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 2e8:	2d052e03 	stccs	14, cr2, [r5, #-12]
 2ec:	03040200 	movweq	r0, #16896	; 0x4200
 2f0:	00040566 	andeq	r0, r4, r6, ror #10
 2f4:	20030402 	andcs	r0, r3, r2, lsl #8
 2f8:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 2fc:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 300:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 304:	1c053c01 	stcne	12, cr3, [r5], {1}
 308:	01040200 	mrseq	r0, R12_usr
 30c:	0003052e 	andeq	r0, r3, lr, lsr #10
 310:	20010402 	andcs	r0, r1, r2, lsl #8
 314:	053f0205 	ldreq	r0, [pc, #-517]!	; 117 <startup-0x1ffffee9>
 318:	0b05591e 	bleq	156798 <startup-0x1fea9868>
 31c:	2e03054b 	cfsh32cs	mvfx0, mvfx3, #43
 320:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 324:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 328:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 32c:	21052e03 	tstcs	r5, r3, lsl #28
 330:	03040200 	movweq	r0, #16896	; 0x4200
 334:	0012052e 	andseq	r0, r2, lr, lsr #10
 338:	66030402 	strvs	r0, [r3], -r2, lsl #8
 33c:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 340:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 344:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
 348:	30052003 	andcc	r2, r5, r3
 34c:	03040200 	movweq	r0, #16896	; 0x4200
 350:	003c052e 	eorseq	r0, ip, lr, lsr #10
 354:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 358:	02002d05 	andeq	r2, r0, #320	; 0x140
 35c:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
 360:	04020004 	streq	r0, [r2], #-4
 364:	29052003 	stmdbcs	r5, {r0, r1, sp}
 368:	03040200 	movweq	r0, #16896	; 0x4200
 36c:	00160549 	andseq	r0, r6, r9, asr #10
 370:	3c010402 	cfstrscc	mvf0, [r1], {2}
 374:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 378:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 37c:	04020003 	streq	r0, [r2], #-3
 380:	02052001 	andeq	r2, r5, #1
 384:	591d053f 	ldmdbpl	sp, {r0, r1, r2, r3, r4, r5, r8, sl}
 388:	054b0305 	strbeq	r0, [fp, #-773]	; 0xfffffcfb
 38c:	0f054b0b 	svceq	0x00054b0b
 390:	2e0b052e 	cfsh32cs	mvfx0, mvfx11, #30
 394:	2e0f053d 	mcrcs	5, 0, r0, cr15, cr13, {1}
 398:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 39c:	05053d07 	streq	r3, [r5, #-3335]	; 0xfffff2f9
 3a0:	2f0c052e 	svccs	0x000c052e
 3a4:	055a0705 	ldrbeq	r0, [sl, #-1797]	; 0xfffff8fb
 3a8:	0c052e05 	stceq	14, cr2, [r5], {5}
 3ac:	5a07052f 	bpl	1c1870 <startup-0x1fe3e790>
 3b0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 3b4:	07052f0c 	streq	r2, [r5, -ip, lsl #30]
 3b8:	2e05055a 	cfrshl32cs	mvfx5, mvfx10, r0
 3bc:	052f0c05 	streq	r0, [pc, #-3077]!	; fffff7bf <ball+0xdfffee9b>
 3c0:	02055a03 	andeq	r5, r5, #12288	; 0x3000
 3c4:	0301054b 	movweq	r0, #5451	; 0x154b
 3c8:	0b054a0e 	bleq	152c08 <startup-0x1fead3f8>
 3cc:	2f03053d 	svccs	0x0003053d
 3d0:	3204052f 	andcc	r0, r4, #197132288	; 0xbc00000
 3d4:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 3d8:	04020005 	streq	r0, [r2], #-5
 3dc:	04054c01 	streq	r4, [r5], #-3073	; 0xfffff3ff
 3e0:	01040200 	mrseq	r0, R12_usr
 3e4:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 3e8:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
 3ec:	023b0104 	eorseq	r0, fp, #4, 2
 3f0:	01010003 	tsteq	r1, r3

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	72670059 	rsbvc	r0, r7, #89	; 0x59
   c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  10:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  14:	5f657469 	svcpl	0x00657469
  18:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  1c:	00646e61 	rsbeq	r6, r4, r1, ror #28
  20:	6a624f74 	bvs	1893df8 <startup-0x1e76c208>
  24:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
  28:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
  2c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  30:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  34:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; fffffe6c <ball+0xdffff548>
  38:	0072656c 	rsbseq	r6, r2, ip, ror #10
  3c:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
  40:	72696400 	rsbvc	r6, r9, #0, 8
  44:	72670079 	rsbvc	r0, r7, #121	; 0x79
  48:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  4c:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
  50:	645f6461 	ldrbvs	r6, [pc], #-1121	; 58 <startup-0x1fffffa8>
  54:	00617461 	rsbeq	r7, r1, r1, ror #8
  58:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
  5c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  60:	6b734f5c 	blvs	1cd3dd8 <startup-0x1e32c228>
  64:	445c7261 	ldrbmi	r7, [ip], #-609	; 0xfffffd9f
  68:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  6c:	4d5c706f 	ldclmi	0, cr7, [ip, #-444]	; 0xfffffe44
  70:	4d5c504f 	ldclmi	0, cr5, [ip, #-316]	; 0xfffffec4
  74:	615c504f 	cmpvs	ip, pc, asr #32
  78:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
  7c:	00676e6f 	rsbeq	r6, r7, pc, ror #28
  80:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
  84:	78697000 	stmdavc	r9!, {ip, sp, lr}^
  88:	64006c65 	strvs	r6, [r0], #-3173	; 0xfffff39b
  8c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  90:	6b696d5f 	blvs	1a5b614 <startup-0x1e5a49ec>
  94:	74006f72 	strvc	r6, [r0], #-3954	; 0xfffff08e
  98:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
  9c:	4f500074 	svcmi	0x00500074
  a0:	00544e49 	subseq	r4, r4, r9, asr #28
  a4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  a8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  ac:	61686320 	cmnvs	r8, r0, lsr #6
  b0:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
  b4:	70735f74 	rsbsvc	r5, r3, r4, ror pc
  b8:	00646565 	rsbeq	r6, r4, r5, ror #10
  bc:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  c0:	736f7000 	cmnvc	pc, #0
  c4:	61620079 	smcvs	8201	; 0x2009
  c8:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
  cc:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  d0:	00797274 	rsbseq	r7, r9, r4, ror r2
  d4:	70617267 	rsbvc	r7, r1, r7, ror #4
  d8:	5f636968 	svcpl	0x00636968
  dc:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  e0:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
  e4:	6d00706d 	stcvs	0, cr7, [r0, #-436]	; 0xfffffe4c
  e8:	006e6961 	rsbeq	r6, lr, r1, ror #18
  ec:	70617267 	rsbvc	r7, r1, r7, ror #4
  f0:	5f636968 	svcpl	0x00636968
  f4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  f8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  fc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 100:	67007261 	strvs	r7, [r0, -r1, ror #4]
 104:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 108:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 10c:	5f6c7274 	svcpl	0x006c7274
 110:	5f746962 	svcpl	0x00746962
 114:	00746573 	rsbseq	r6, r4, r3, ror r5
 118:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 11c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 120:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 124:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
 128:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 12c:	69007972 	stmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 130:	5f74696e 	svcpl	0x0074696e
 134:	00707061 	rsbseq	r7, r0, r1, rrx
 138:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 13c:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 140:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 144:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
 148:	0079657a 	rsbseq	r6, r9, sl, ror r5
 14c:	616c6564 	cmnvs	ip, r4, ror #10
 150:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 154:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 158:	20554e47 	subscs	r4, r5, r7, asr #28
 15c:	20393943 	eorscs	r3, r9, r3, asr #18
 160:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
 164:	30322031 	eorscc	r2, r2, r1, lsr r0
 168:	30313931 	eorscc	r3, r1, r1, lsr r9
 16c:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
 170:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
 174:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 178:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 17c:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
 180:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
 184:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 188:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 18c:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 190:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 194:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
 198:	205d3939 	subscs	r3, sp, r9, lsr r9
 19c:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 1a0:	20626d75 	rsbcs	r6, r2, r5, ror sp
 1a4:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 1a8:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 1ac:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 1b0:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 1b4:	616d2d20 	cmnvs	sp, r0, lsr #26
 1b8:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 1bc:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 1c0:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 1c4:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 1c8:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 1cc:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 1d0:	00393963 	eorseq	r3, r9, r3, ror #18
 1d4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 1d8:	00707574 	rsbseq	r7, r0, r4, ror r5
 1dc:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 1e0:	61726400 	cmnvs	r2, r0, lsl #8
 1e4:	616d0077 	smcvs	53255	; 0xd007
 1e8:	69006b73 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
 1ec:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 1f0:	6c617600 	stclvs	6, cr7, [r1], #-0
 1f4:	64006575 	strvs	r6, [r0], #-1397	; 0xfffffa8b
 1f8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1fc:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 200:	6700696c 	strvs	r6, [r0, -ip, ror #18]
 204:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 208:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 20c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 210:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 214:	65730061 	ldrbvs	r0, [r3, #-97]!	; 0xffffff9f
 218:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 21c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 220:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 224:	67006465 	strvs	r6, [r0, -r5, ror #8]
 228:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 22c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 230:	5f746961 	svcpl	0x00746961
 234:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 238:	72670079 	rsbvc	r0, r7, #121	; 0x79
 23c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 240:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 244:	5f726165 	svcpl	0x00726165
 248:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 24c:	63006e65 	movwvs	r6, #3685	; 0xe65
 250:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 254:	6a626f5f 	bvs	189bfd8 <startup-0x1e764028>
 258:	00746365 	rsbseq	r6, r4, r5, ror #6
 25c:	70617267 	rsbvc	r7, r1, r7, ror #4
 260:	5f636968 	svcpl	0x00636968
 264:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 268:	7a696c61 	bvc	1a5b3f4 <startup-0x1e5a4c0c>
 26c:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
 270:	5f79616c 	svcpl	0x0079616c
 274:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 278:	3a430073 	bcc	10c044c <startup-0x1ef3fbb4>
 27c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 280:	4f2f7372 	svcmi	0x002f7372
 284:	72616b73 	rsbvc	r6, r1, #117760	; 0x1cc00
 288:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 28c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 290:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 294:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 298:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
 29c:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
 2a0:	74732f67 	ldrbtvc	r2, [r3], #-3943	; 0xfffff099
 2a4:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 2a8:	00632e70 	rsbeq	r2, r3, r0, ror lr
 2ac:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 2b0:	6a626f5f 	bvs	189c034 <startup-0x1e763fcc>
 2b4:	00746365 	rsbseq	r6, r4, r5, ror #6
 2b8:	70617267 	rsbvc	r7, r1, r7, ror #4
 2bc:	5f636968 	svcpl	0x00636968
 2c0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 2c4:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 2c8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 2cc:	6d007374 	stcvs	3, cr7, [r0, #-464]	; 0xfffffe30
 2d0:	5f65766f 	svcpl	0x0065766f
 2d4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 2d8:	73007463 	movwvc	r7, #1123	; 0x463
 2dc:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 2e0:	70730078 	rsbsvc	r0, r3, r8, ror r0
 2e4:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 2e8:	424f5000 	submi	r5, pc, #0
 2ec:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000000a 	andeq	r0, r0, sl
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000001a 	andcs	r0, r0, sl, lsl r0
  48:	00000012 	andeq	r0, r0, r2, lsl r0
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	2000002c 	andcs	r0, r0, ip, lsr #32
  64:	0000002e 	andeq	r0, r0, lr, lsr #32
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  74:	00000007 	andeq	r0, r0, r7
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	2000005a 	andcs	r0, r0, sl, asr r0
  84:	0000003e 	andeq	r0, r0, lr, lsr r0
  88:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  8c:	41018e02 	tstmi	r1, r2, lsl #28
  90:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  94:	00000007 	andeq	r0, r0, r7
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	20000098 	mulcs	r0, r8, r0
  a4:	00000050 	andeq	r0, r0, r0, asr r0
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200000e8 	andcs	r0, r0, r8, ror #1
  c4:	00000050 	andeq	r0, r0, r0, asr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000138 	andcs	r0, r0, r8, lsr r1
  e4:	00000060 	andeq	r0, r0, r0, rrx
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000198 	mulcs	r0, r8, r1
 104:	00000070 	andeq	r0, r0, r0, ror r0
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	20000208 	andcs	r0, r0, r8, lsl #4
 124:	00000098 	muleq	r0, r8, r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200002a0 	andcs	r0, r0, r0, lsr #5
 144:	00000084 	andeq	r0, r0, r4, lsl #1
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000324 	andcs	r0, r0, r4, lsr #6
 164:	00000046 	andeq	r0, r0, r6, asr #32
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	2000036a 	andcs	r0, r0, sl, ror #6
 184:	00000046 	andeq	r0, r0, r6, asr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	200003b0 			; <UNDEFINED> instruction: 0x200003b0
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200003da 	ldrdcs	r0, [r0], -sl
 1c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	200003f4 	strdcs	r0, [r0], -r4
 1e0:	0000006e 	andeq	r0, r0, lr, rrx
 1e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e8:	41018e02 	tstmi	r1, r2, lsl #28
 1ec:	0000070d 	andeq	r0, r0, sp, lsl #14
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000462 	andcs	r0, r0, r2, ror #8
 1fc:	00000068 	andeq	r0, r0, r8, rrx
 200:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 204:	41018e02 	tstmi	r1, r2, lsl #28
 208:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 20c:	00000007 	andeq	r0, r0, r7
 210:	00000020 	andeq	r0, r0, r0, lsr #32
 214:	00000000 	andeq	r0, r0, r0
 218:	200004ca 	andcs	r0, r0, sl, asr #9
 21c:	00000176 	andeq	r0, r0, r6, ror r1
 220:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 224:	86048505 	strhi	r8, [r4], -r5, lsl #10
 228:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 22c:	380e4101 	stmdacc	lr, {r0, r8, lr}
 230:	00070d41 	andeq	r0, r7, r1, asr #26
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	00000000 	andeq	r0, r0, r0
 23c:	20000640 	andcs	r0, r0, r0, asr #12
 240:	00000020 	andeq	r0, r0, r0, lsr #32
 244:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 248:	41018e02 	tstmi	r1, r2, lsl #28
 24c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 250:	00000007 	andeq	r0, r0, r7
 254:	0000001c 	andeq	r0, r0, ip, lsl r0
 258:	00000000 	andeq	r0, r0, r0
 25c:	20000660 	andcs	r0, r0, r0, ror #12
 260:	00000060 	andeq	r0, r0, r0, rrx
 264:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 268:	41018e02 	tstmi	r1, r2, lsl #28
 26c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 270:	00000007 	andeq	r0, r0, r7
 274:	0000001c 	andeq	r0, r0, ip, lsl r0
 278:	00000000 	andeq	r0, r0, r0
 27c:	200006c0 	andcs	r0, r0, r0, asr #13
 280:	00000060 	andeq	r0, r0, r0, rrx
 284:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 288:	41018e02 	tstmi	r1, r2, lsl #28
 28c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 290:	00000007 	andeq	r0, r0, r7
 294:	0000001c 	andeq	r0, r0, ip, lsl r0
 298:	00000000 	andeq	r0, r0, r0
 29c:	20000720 	andcs	r0, r0, r0, lsr #14
 2a0:	00000084 	andeq	r0, r0, r4, lsl #1
 2a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2a8:	41018e02 	tstmi	r1, r2, lsl #28
 2ac:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2b0:	00000007 	andeq	r0, r0, r7
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	200007a4 	andcs	r0, r0, r4, lsr #15
 2c0:	00000034 	andeq	r0, r0, r4, lsr r0
 2c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c8:	41018e02 	tstmi	r1, r2, lsl #28
 2cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2d0:	00000007 	andeq	r0, r0, r7
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2dc:	7c010001 	stcvc	0, cr0, [r1], {1}
 2e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2e4:	0000000c 	andeq	r0, r0, ip
 2e8:	000002d4 	ldrdeq	r0, [r0], -r4
 2ec:	200007d9 	ldrdcs	r0, [r0], -r9
 2f0:	0000010a 	andeq	r0, r0, sl, lsl #2
